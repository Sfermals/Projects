

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Wed Feb 08 22:04:45 2023

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           	psect	idataCOMRAM
    28  0076BF                     __pidataCOMRAM:
    29                           	opt stack 0
    30                           
    31                           ;initializer for _Message1
    32  0076BF  52                 	db	82
    33  0076C0  61                 	db	97
    34  0076C1  69                 	db	105
    35  0076C2  6E                 	db	110
    36  0076C3  20                 	db	32
    37  0076C4  53                 	db	83
    38  0076C5  65                 	db	101
    39  0076C6  6E                 	db	110
    40  0076C7  73                 	db	115
    41  0076C8  6F                 	db	111
    42  0076C9  72                 	db	114
    43  0076CA  20                 	db	32
    44  0076CB  3A                 	db	58
    45  0076CC  20                 	db	32
    46  0076CD  20                 	db	32
    47  0076CE  00                 	db	0
    48                           
    49                           ;initializer for _Message3
    50  0076CF  20                 	db	32
    51  0076D0  4C                 	db	76
    52  0076D1  69                 	db	105
    53  0076D2  67                 	db	103
    54  0076D3  68                 	db	104
    55  0076D4  74                 	db	116
    56  0076D5  20                 	db	32
    57  0076D6  52                 	db	82
    58  0076D7  61                 	db	97
    59  0076D8  69                 	db	105
    60  0076D9  6E                 	db	110
    61  0076DA  3A                 	db	58
    62  0076DB  20                 	db	32
    63  0076DC  20                 	db	32
    64  0076DD  00                 	db	0
    65                           
    66                           ;initializer for _Message4
    67  0076DE  20                 	db	32
    68  0076DF  52                 	db	82
    69  0076E0  61                 	db	97
    70  0076E1  69                 	db	105
    71  0076E2  6E                 	db	110
    72  0076E3  69                 	db	105
    73  0076E4  6E                 	db	110
    74  0076E5  67                 	db	103
    75  0076E6  3A                 	db	58
    76  0076E7  20                 	db	32
    77  0076E8  20                 	db	32
    78  0076E9  00                 	db	0
    79                           
    80                           	psect	idataBANK0
    81  007699                     __pidataBANK0:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _Message5
    85  007699  20                 	db	32
    86  00769A  52                 	db	82
    87  00769B  61                 	db	97
    88  00769C  69                 	db	105
    89  00769D  6E                 	db	110
    90  00769E  69                 	db	105
    91  00769F  6E                 	db	110
    92  0076A0  67                 	db	103
    93  0076A1  20                 	db	32
    94  0076A2  68                 	db	104
    95  0076A3  65                 	db	101
    96  0076A4  61                 	db	97
    97  0076A5  76                 	db	118
    98  0076A6  69                 	db	105
    99  0076A7  6C                 	db	108
   100  0076A8  79                 	db	121
   101  0076A9  3A                 	db	58
   102  0076AA  20                 	db	32
   103  0076AB  20                 	db	32
   104  0076AC  00                 	db	0
   105                           
   106                           ;initializer for _Message2
   107  0076AD  43                 	db	67
   108  0076AE  6C                 	db	108
   109  0076AF  65                 	db	101
   110  0076B0  61                 	db	97
   111  0076B1  72                 	db	114
   112  0076B2  20                 	db	32
   113  0076B3  77                 	db	119
   114  0076B4  65                 	db	101
   115  0076B5  61                 	db	97
   116  0076B6  74                 	db	116
   117  0076B7  68                 	db	104
   118  0076B8  65                 	db	101
   119  0076B9  72                 	db	114
   120  0076BA  20                 	db	32
   121  0076BB  3A                 	db	58
   122  0076BC  20                 	db	32
   123  0076BD  20                 	db	32
   124  0076BE  00                 	db	0
   125                           
   126                           	psect	smallconst
   127  001004                     __psmallconst:
   128                           	opt stack 0
   129  001004  00                 	db	0
   130  001005                     getkey@F4444:
   131                           	opt stack 0
   132  001005  31                 	db	49
   133  001006  32                 	db	50
   134  001007  33                 	db	51
   135  001008  46                 	db	70
   136  001009  34                 	db	52
   137  00100A  35                 	db	53
   138  00100B  36                 	db	54
   139  00100C  45                 	db	69
   140  00100D  37                 	db	55
   141  00100E  38                 	db	56
   142  00100F  39                 	db	57
   143  001010  44                 	db	68
   144  001011  41                 	db	65
   145  001012  30                 	db	48
   146  001013  42                 	db	66
   147  001014  43                 	db	67
   148  001015  20                 	db	32
   149  001016  00                 	db	0
   150  001017                     __end_ofgetkey@F4444:
   151                           	opt stack 0
   152  001017                     _dpowers:
   153                           	opt stack 0
   154  001017  0001               	dw	1
   155  001019  000A               	dw	10
   156  00101B  0064               	dw	100
   157  00101D  03E8               	dw	1000
   158  00101F  2710               	dw	10000
   159  001021                     __end_of_dpowers:
   160                           	opt stack 0
   161  0000                     _ADCON0	set	4034
   162  0000                     _ADCON0bits	set	4034
   163  0000                     _ADCON1	set	4033
   164  0000                     _ADCON2	set	4032
   165  0000                     _ADRESH	set	4036
   166  0000                     _PORTB	set	3969
   167  0000                     _PORTBbits	set	3969
   168  0000                     _PORTCbits	set	3970
   169  0000                     _PORTD	set	3971
   170  0000                     _PORTDbits	set	3971
   171  0000                     _TRISCbits	set	3988
   172  0000                     _TRISD	set	3989
   173  001021                     STR_1:
   174  001021  53                 	db	83	;'S'
   175  001022  65                 	db	101	;'e'
   176  001023  6E                 	db	110	;'n'
   177  001024  73                 	db	115	;'s'
   178  001025  6F                 	db	111	;'o'
   179  001026  72                 	db	114	;'r'
   180  001027  20                 	db	32
   181  001028  76                 	db	118	;'v'
   182  001029  61                 	db	97	;'a'
   183  00102A  6C                 	db	108	;'l'
   184  00102B  75                 	db	117	;'u'
   185  00102C  65                 	db	101	;'e'
   186  00102D  3A                 	db	58	;':'
   187  00102E  20                 	db	32
   188  00102F  20                 	db	32
   189  001030  25                 	db	37
   190  001031  64                 	db	100	;'d'
   191  001032  20                 	db	32
   192  001033  00                 	db	0
   193  001034  00                 	db	0	; dummy byte at the end
   194  0000                     
   195                           ; #config settings
   196                           
   197                           	psect	cinit
   198  0077F0                     __pcinit:
   199                           	opt stack 0
   200  0077F0                     start_initialization:
   201                           	opt stack 0
   202  0077F0                     __initialization:
   203                           	opt stack 0
   204                           
   205                           ; Clear objects allocated to COMRAM (26 bytes)
   206  0077F0  EE00  F02C         	lfsr	0,__pbssCOMRAM
   207  0077F4  0E1A               	movlw	26
   208  0077F6                     clear_0:
   209  0077F6  6AEE               	clrf	postinc0,c
   210  0077F8  06E8               	decf	wreg,f,c
   211  0077FA  E1FD               	bnz	clear_0
   212                           
   213                           ; Initialize objects allocated to BANK0 (38 bytes)
   214                           ; load TBLPTR registers with __pidataBANK0
   215  0077FC  0E99               	movlw	low __pidataBANK0
   216  0077FE  6EF6               	movwf	tblptrl,c
   217  007800  0E76               	movlw	high __pidataBANK0
   218  007802  6EF7               	movwf	tblptrh,c
   219  007804  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   220  007806  6EF8               	movwf	tblptru,c
   221  007808  EE00  F060         	lfsr	0,__pdataBANK0
   222  00780C  EE10 F026          	lfsr	1,38
   223  007810                     copy_data0:
   224  007810  0009               	tblrd		*+
   225  007812  CFF5 FFEE          	movff	tablat,postinc0
   226  007816  50E5               	movf	postdec1,w,c
   227  007818  50E1               	movf	fsr1l,w,c
   228  00781A  E1FA               	bnz	copy_data0
   229                           
   230                           ; Initialize objects allocated to COMRAM (43 bytes)
   231                           ; load TBLPTR registers with __pidataCOMRAM
   232  00781C  0EBF               	movlw	low __pidataCOMRAM
   233  00781E  6EF6               	movwf	tblptrl,c
   234  007820  0E76               	movlw	high __pidataCOMRAM
   235  007822  6EF7               	movwf	tblptrh,c
   236  007824  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   237  007826  6EF8               	movwf	tblptru,c
   238  007828  EE00  F001         	lfsr	0,__pdataCOMRAM
   239  00782C  EE10 F02B          	lfsr	1,43
   240  007830                     copy_data1:
   241  007830  0009               	tblrd		*+
   242  007832  CFF5 FFEE          	movff	tablat,postinc0
   243  007836  50E5               	movf	postdec1,w,c
   244  007838  50E1               	movf	fsr1l,w,c
   245  00783A  E1FA               	bnz	copy_data1
   246  00783C                     end_of_initialization:
   247                           	opt stack 0
   248  00783C                     __end_of__initialization:
   249                           	opt stack 0
   250  00783C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   251  00783E  6EF8               	movwf	tblptru,c
   252  007840  0100               	movlb	0
   253  007842  EFBF  F03D         	goto	_main	;jump to C main() function
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           postdec1	equ	0xFE5
   261                           fsr1l	equ	0xFE1
   262                           
   263                           	psect	bssCOMRAM
   264  00002C                     __pbssCOMRAM:
   265                           	opt stack 0
   266  00002C                     _i:
   267                           	opt stack 0
   268  00002C                     	ds	2
   269  00002E                     _ADC_value:
   270                           	opt stack 0
   271  00002E                     	ds	1
   272  00002F                     _key:
   273                           	opt stack 0
   274  00002F                     	ds	1
   275  000030                     _outchar:
   276                           	opt stack 0
   277  000030                     	ds	1
   278  000031                     _outchar2:
   279                           	opt stack 0
   280  000031                     	ds	1
   281  000032                     _buffer:
   282                           	opt stack 0
   283  000032                     	ds	20
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	dataCOMRAM
   294  000001                     __pdataCOMRAM:
   295                           	opt stack 0
   296  000001                     _Message1:
   297                           	opt stack 0
   298  000001                     	ds	16
   299  000011                     _Message3:
   300                           	opt stack 0
   301  000011                     	ds	15
   302  000020                     _Message4:
   303                           	opt stack 0
   304  000020                     	ds	12
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	dataBANK0
   315  000060                     __pdataBANK0:
   316                           	opt stack 0
   317  000060                     _Message5:
   318                           	opt stack 0
   319  000060                     	ds	20
   320  000074                     _Message2:
   321                           	opt stack 0
   322  000074                     	ds	18
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	cstackCOMRAM
   333  000046                     __pcstackCOMRAM:
   334                           	opt stack 0
   335  000046                     ??_lcd_strobe:
   336  000046                     ?___lwdiv:
   337                           	opt stack 0
   338  000046                     delay_ms@i:
   339                           	opt stack 0
   340  000046                     ___lwdiv@dividend:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x0
   344  000046                     	ds	1
   345  000047                     ??_lcd_write_cmd:
   346  000047                     ??_lcd_write_data:
   347                           
   348                           ; 0 bytes @ 0x1
   349  000047                     	ds	1
   350  000048                     ??_delay_ms:
   351  000048                     lcd_write_cmd@cmd:
   352                           	opt stack 0
   353  000048                     lcd_write_data@data:
   354                           	opt stack 0
   355  000048                     ___lwdiv@divisor:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x2
   359  000048                     	ds	1
   360  000049                     lcd_write_cmd@temp2:
   361                           	opt stack 0
   362  000049                     lcd_write_data@temp1:
   363                           	opt stack 0
   364  000049                     delay_ms@j:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x3
   368  000049                     	ds	1
   369  00004A                     ??_lcd_init:
   370  00004A                     ___lwdiv@quotient:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x4
   374  00004A                     	ds	1
   375  00004B                     lcd_init@i:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x5
   379  00004B                     	ds	1
   380  00004C                     ___lwdiv@counter:
   381                           	opt stack 0
   382                           
   383                           ; 1 bytes @ 0x6
   384  00004C                     	ds	1
   385  00004D                     ?___lwmod:
   386                           	opt stack 0
   387  00004D                     delay_us@i:
   388                           	opt stack 0
   389  00004D                     ___lwmod@dividend:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x7
   393  00004D                     	ds	2
   394  00004F                     delay_us@j:
   395                           	opt stack 0
   396  00004F                     ___lwmod@divisor:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x9
   400  00004F                     	ds	2
   401  000051                     ___lwmod@counter:
   402                           	opt stack 0
   403  000051                     delay_us@lower:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0xB
   407  000051                     	ds	1
   408  000052                     ?_sprintf:
   409                           	opt stack 0
   410  000052                     sprintf@sp:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0xC
   414  000052                     	ds	1
   415  000053                     ??_onetone:
   416                           
   417                           ; 0 bytes @ 0xD
   418  000053                     	ds	1
   419  000054                     onetone@k:
   420                           	opt stack 0
   421  000054                     sprintf@f:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0xE
   425  000054                     	ds	4
   426  000058                     ??_sprintf:
   427                           
   428                           ; 0 bytes @ 0x12
   429  000058                     	ds	1
   430  000059                     sprintf@ap:
   431                           	opt stack 0
   432                           
   433                           ; 2 bytes @ 0x13
   434  000059                     	ds	2
   435  00005B                     sprintf@flag:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x15
   439  00005B                     	ds	1
   440  00005C                     sprintf@prec:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x16
   444  00005C                     	ds	1
   445  00005D                     sprintf@val:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x17
   449  00005D                     	ds	2
   450  00005F                     sprintf@c:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x19
   454  00005F                     	ds	1
   455  000060                     tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           ; 0 bytes @ 0x1A
   465 ;;
   466 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   467 ;;
   468 ;; *************** function _main *****************
   469 ;; Defined at:
   470 ;;		line 44 in file "ADC.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;		None
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;		None               void
   477 ;; Registers used:
   478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   484 ;;      Params:         0       0       0       0       0       0       0       0       0
   485 ;;      Locals:         0       0       0       0       0       0       0       0       0
   486 ;;      Temps:          0       0       0       0       0       0       0       0       0
   487 ;;      Totals:         0       0       0       0       0       0       0       0       0
   488 ;;Total ram usage:        0 bytes
   489 ;; Hardware stack levels required when called:    3
   490 ;; This function calls:
   491 ;;		_delay_ms
   492 ;;		_lcd_init
   493 ;;		_lcd_write_cmd
   494 ;;		_lcd_write_data
   495 ;;		_onetone
   496 ;;		_sprintf
   497 ;; This function is called by:
   498 ;;		Startup code after reset
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text0
   503  007B7E                     __ptext0:
   504                           	opt stack 0
   505  007B7E                     _main:
   506                           	opt stack 28
   507                           
   508                           ;ADC.c: 48: lcd_init();
   509                           
   510                           ;incstack = 0
   511  007B7E  EC5B  F03C         	call	_lcd_init	;wreg free
   512                           
   513                           ;ADC.c: 51: lcd_write_cmd(0x80);
   514  007B82  0E80               	movlw	128
   515  007B84  EC23  F03C         	call	_lcd_write_cmd
   516                           
   517                           ;ADC.c: 53: for (i=0;Message1[i]!=0;i++)
   518  007B88  0E00               	movlw	0
   519  007B8A  6E2D               	movwf	_i+1,c
   520  007B8C  0E00               	movlw	0
   521  007B8E  6E2C               	movwf	_i,c
   522  007B90  D00D               	goto	l1469
   523  007B92                     l1463:
   524                           
   525                           ;ADC.c: 54: {
   526                           ;ADC.c: 55: outchar = Message1[i];
   527  007B92  0E01               	movlw	low _Message1
   528  007B94  242C               	addwf	_i,w,c
   529  007B96  6ED9               	movwf	fsr2l,c
   530  007B98  0E00               	movlw	high _Message1
   531  007B9A  202D               	addwfc	_i+1,w,c
   532  007B9C  6EDA               	movwf	fsr2h,c
   533  007B9E  50DF               	movf	indf2,w,c
   534  007BA0  6E30               	movwf	_outchar,c
   535                           
   536                           ;ADC.c: 56: lcd_write_data(outchar);
   537  007BA2  5030               	movf	_outchar,w,c
   538  007BA4  ECD1  F03C         	call	_lcd_write_data
   539  007BA8  4A2C               	infsnz	_i,f,c
   540  007BAA  2A2D               	incf	_i+1,f,c
   541  007BAC                     l1469:
   542  007BAC  0E01               	movlw	low _Message1
   543  007BAE  242C               	addwf	_i,w,c
   544  007BB0  6ED9               	movwf	fsr2l,c
   545  007BB2  0E00               	movlw	high _Message1
   546  007BB4  202D               	addwfc	_i+1,w,c
   547  007BB6  6EDA               	movwf	fsr2h,c
   548  007BB8  50DF               	movf	indf2,w,c
   549  007BBA  A4D8               	btfss	status,2,c
   550  007BBC  D7EA               	goto	l1463
   551                           
   552                           ;ADC.c: 57: }
   553                           ;ADC.c: 67: TRISD = 0x00;
   554  007BBE  0E00               	movlw	0
   555  007BC0  6E95               	movwf	3989,c	;volatile
   556                           
   557                           ;ADC.c: 68: PORTD = 0x00;
   558  007BC2  0E00               	movlw	0
   559  007BC4  6E83               	movwf	3971,c	;volatile
   560                           
   561                           ;ADC.c: 70: TRISCbits.TRISC1 = 0;
   562  007BC6  9294               	bcf	3988,1,c	;volatile
   563                           
   564                           ;ADC.c: 71: PORTCbits.RC1 = 0;
   565  007BC8  9282               	bcf	3970,1,c	;volatile
   566                           
   567                           ;ADC.c: 73: TRISCbits.TRISC2 = 0;
   568  007BCA  9494               	bcf	3988,2,c	;volatile
   569                           
   570                           ;ADC.c: 74: PORTCbits.RC2 = 0;
   571  007BCC  9482               	bcf	3970,2,c	;volatile
   572                           
   573                           ;ADC.c: 78: ADCON0 = 0b00000001;
   574  007BCE  0E01               	movlw	1
   575  007BD0  6EC2               	movwf	4034,c	;volatile
   576                           
   577                           ;ADC.c: 84: ADCON1 = 0b00001100;
   578  007BD2  0E0C               	movlw	12
   579  007BD4  6EC1               	movwf	4033,c	;volatile
   580                           
   581                           ;ADC.c: 88: ADCON2 = 0b00010110;
   582  007BD6  0E16               	movlw	22
   583  007BD8  6EC0               	movwf	4032,c	;volatile
   584                           
   585                           ;ADC.c: 92: TRISCbits.TRISC0 = 0;
   586  007BDA  9094               	bcf	3988,0,c	;volatile
   587  007BDC                     l1483:
   588                           
   589                           ;ADC.c: 95: {
   590                           ;ADC.c: 96: ADCON0bits.GO = 1;
   591  007BDC  82C2               	bsf	4034,1,c	;volatile
   592  007BDE                     l124:
   593  007BDE  B2C2               	btfsc	4034,1,c	;volatile
   594  007BE0  D7FE               	goto	l124
   595                           
   596                           ;ADC.c: 102: if(ADRESH> 0xF0 && ADRESH < 256)
   597  007BE2  0EF0               	movlw	240
   598  007BE4  64C4               	cpfsgt	4036,c	;volatile
   599  007BE6  D04A               	goto	l1513
   600                           
   601                           ;ADC.c: 103: {
   602                           ;ADC.c: 105: lcd_write_cmd(0x80);
   603  007BE8  0E80               	movlw	128
   604  007BEA  EC23  F03C         	call	_lcd_write_cmd
   605                           
   606                           ;ADC.c: 107: for (i=0;Message2[i]!=0;i++)
   607  007BEE  0E00               	movlw	0
   608  007BF0  6E2D               	movwf	_i+1,c
   609  007BF2  0E00               	movlw	0
   610  007BF4  6E2C               	movwf	_i,c
   611  007BF6  D00D               	goto	l1497
   612  007BF8                     l1491:
   613                           
   614                           ;ADC.c: 108: {
   615                           ;ADC.c: 109: outchar = Message2[i];
   616  007BF8  0E74               	movlw	low _Message2
   617  007BFA  242C               	addwf	_i,w,c
   618  007BFC  6ED9               	movwf	fsr2l,c
   619  007BFE  0E00               	movlw	high _Message2
   620  007C00  202D               	addwfc	_i+1,w,c
   621  007C02  6EDA               	movwf	fsr2h,c
   622  007C04  50DF               	movf	indf2,w,c
   623  007C06  6E30               	movwf	_outchar,c
   624                           
   625                           ;ADC.c: 110: lcd_write_data(outchar);
   626  007C08  5030               	movf	_outchar,w,c
   627  007C0A  ECD1  F03C         	call	_lcd_write_data
   628  007C0E  4A2C               	infsnz	_i,f,c
   629  007C10  2A2D               	incf	_i+1,f,c
   630  007C12                     l1497:
   631  007C12  0E74               	movlw	low _Message2
   632  007C14  242C               	addwf	_i,w,c
   633  007C16  6ED9               	movwf	fsr2l,c
   634  007C18  0E00               	movlw	high _Message2
   635  007C1A  202D               	addwfc	_i+1,w,c
   636  007C1C  6EDA               	movwf	fsr2h,c
   637  007C1E  50DF               	movf	indf2,w,c
   638  007C20  A4D8               	btfss	status,2,c
   639  007C22  D7EA               	goto	l1491
   640                           
   641                           ;ADC.c: 111: }
   642                           ;ADC.c: 113: sprintf(buffer,"Sensor value:  %d ", ADRESH);
   643  007C24  0E32               	movlw	low _buffer
   644  007C26  6E52               	movwf	sprintf@sp,c
   645  007C28  0E00               	movlw	high _buffer
   646  007C2A  6E53               	movwf	sprintf@sp+1,c
   647  007C2C  0E21               	movlw	low STR_1
   648  007C2E  6E54               	movwf	sprintf@f,c
   649  007C30  0E10               	movlw	high STR_1
   650  007C32  6E55               	movwf	sprintf@f+1,c
   651  007C34  CFC4 F056          	movff	4036,?_sprintf+4	;volatile
   652  007C38  6A57               	clrf	?_sprintf+5,c
   653  007C3A  EC1B  F03D         	call	_sprintf	;wreg free
   654                           
   655                           ;ADC.c: 115: lcd_write_cmd(0xC0);
   656  007C3E  0EC0               	movlw	192
   657  007C40  EC23  F03C         	call	_lcd_write_cmd
   658                           
   659                           ;ADC.c: 117: for (i=0;buffer[i]!=0;i++)
   660  007C44  0E00               	movlw	0
   661  007C46  6E2D               	movwf	_i+1,c
   662  007C48  0E00               	movlw	0
   663  007C4A  6E2C               	movwf	_i,c
   664  007C4C  D00D               	goto	l1511
   665  007C4E                     l1505:
   666                           
   667                           ;ADC.c: 118: {
   668                           ;ADC.c: 119: outchar = buffer[i];
   669  007C4E  0E32               	movlw	low _buffer
   670  007C50  242C               	addwf	_i,w,c
   671  007C52  6ED9               	movwf	fsr2l,c
   672  007C54  0E00               	movlw	high _buffer
   673  007C56  202D               	addwfc	_i+1,w,c
   674  007C58  6EDA               	movwf	fsr2h,c
   675  007C5A  50DF               	movf	indf2,w,c
   676  007C5C  6E30               	movwf	_outchar,c
   677                           
   678                           ;ADC.c: 120: lcd_write_data(outchar);
   679  007C5E  5030               	movf	_outchar,w,c
   680  007C60  ECD1  F03C         	call	_lcd_write_data
   681  007C64  4A2C               	infsnz	_i,f,c
   682  007C66  2A2D               	incf	_i+1,f,c
   683  007C68                     l1511:
   684  007C68  0E32               	movlw	low _buffer
   685  007C6A  242C               	addwf	_i,w,c
   686  007C6C  6ED9               	movwf	fsr2l,c
   687  007C6E  0E00               	movlw	high _buffer
   688  007C70  202D               	addwfc	_i+1,w,c
   689  007C72  6EDA               	movwf	fsr2h,c
   690  007C74  50DF               	movf	indf2,w,c
   691  007C76  B4D8               	btfsc	status,2,c
   692  007C78  D7B1               	goto	l1483
   693  007C7A  D7E9               	goto	l1505
   694  007C7C                     l1513:
   695                           
   696                           ;ADC.c: 123: else if(0xF0 >ADRESH && ADRESH> 0XA0)
   697  007C7C  0EF0               	movlw	240
   698  007C7E  60C4               	cpfslt	4036,c	;volatile
   699  007C80  D071               	goto	l1553
   700  007C82  0EA0               	movlw	160
   701  007C84  64C4               	cpfsgt	4036,c	;volatile
   702  007C86  D06E               	goto	l1553
   703                           
   704                           ;ADC.c: 124: {
   705                           ;ADC.c: 127: lcd_write_cmd(0x80);
   706  007C88  0E80               	movlw	128
   707  007C8A  EC23  F03C         	call	_lcd_write_cmd
   708                           
   709                           ;ADC.c: 129: for (i=0;Message3[i]!=0;i++)
   710  007C8E  0E00               	movlw	0
   711  007C90  6E2D               	movwf	_i+1,c
   712  007C92  0E00               	movlw	0
   713  007C94  6E2C               	movwf	_i,c
   714  007C96  D00D               	goto	l1527
   715  007C98                     l1521:
   716                           
   717                           ;ADC.c: 130: {
   718                           ;ADC.c: 131: outchar = Message3[i];
   719  007C98  0E11               	movlw	low _Message3
   720  007C9A  242C               	addwf	_i,w,c
   721  007C9C  6ED9               	movwf	fsr2l,c
   722  007C9E  0E00               	movlw	high _Message3
   723  007CA0  202D               	addwfc	_i+1,w,c
   724  007CA2  6EDA               	movwf	fsr2h,c
   725  007CA4  50DF               	movf	indf2,w,c
   726  007CA6  6E30               	movwf	_outchar,c
   727                           
   728                           ;ADC.c: 132: lcd_write_data(outchar);
   729  007CA8  5030               	movf	_outchar,w,c
   730  007CAA  ECD1  F03C         	call	_lcd_write_data
   731  007CAE  4A2C               	infsnz	_i,f,c
   732  007CB0  2A2D               	incf	_i+1,f,c
   733  007CB2                     l1527:
   734  007CB2  0E11               	movlw	low _Message3
   735  007CB4  242C               	addwf	_i,w,c
   736  007CB6  6ED9               	movwf	fsr2l,c
   737  007CB8  0E00               	movlw	high _Message3
   738  007CBA  202D               	addwfc	_i+1,w,c
   739  007CBC  6EDA               	movwf	fsr2h,c
   740  007CBE  50DF               	movf	indf2,w,c
   741  007CC0  A4D8               	btfss	status,2,c
   742  007CC2  D7EA               	goto	l1521
   743                           
   744                           ;ADC.c: 133: }
   745                           ;ADC.c: 135: sprintf(buffer,"Sensor value:  %d ", ADRESH);
   746  007CC4  0E32               	movlw	low _buffer
   747  007CC6  6E52               	movwf	sprintf@sp,c
   748  007CC8  0E00               	movlw	high _buffer
   749  007CCA  6E53               	movwf	sprintf@sp+1,c
   750  007CCC  0E21               	movlw	low STR_1
   751  007CCE  6E54               	movwf	sprintf@f,c
   752  007CD0  0E10               	movlw	high STR_1
   753  007CD2  6E55               	movwf	sprintf@f+1,c
   754  007CD4  CFC4 F056          	movff	4036,?_sprintf+4	;volatile
   755  007CD8  6A57               	clrf	?_sprintf+5,c
   756  007CDA  EC1B  F03D         	call	_sprintf	;wreg free
   757                           
   758                           ;ADC.c: 137: lcd_write_cmd(0xC0);
   759  007CDE  0EC0               	movlw	192
   760  007CE0  EC23  F03C         	call	_lcd_write_cmd
   761                           
   762                           ;ADC.c: 139: for (i=0;buffer[i]!=0;i++)
   763  007CE4  0E00               	movlw	0
   764  007CE6  6E2D               	movwf	_i+1,c
   765  007CE8  0E00               	movlw	0
   766  007CEA  6E2C               	movwf	_i,c
   767  007CEC  D00D               	goto	l1541
   768  007CEE                     l1535:
   769                           
   770                           ;ADC.c: 140: {
   771                           ;ADC.c: 141: outchar = buffer[i];
   772  007CEE  0E32               	movlw	low _buffer
   773  007CF0  242C               	addwf	_i,w,c
   774  007CF2  6ED9               	movwf	fsr2l,c
   775  007CF4  0E00               	movlw	high _buffer
   776  007CF6  202D               	addwfc	_i+1,w,c
   777  007CF8  6EDA               	movwf	fsr2h,c
   778  007CFA  50DF               	movf	indf2,w,c
   779  007CFC  6E30               	movwf	_outchar,c
   780                           
   781                           ;ADC.c: 142: lcd_write_data(outchar);
   782  007CFE  5030               	movf	_outchar,w,c
   783  007D00  ECD1  F03C         	call	_lcd_write_data
   784  007D04  4A2C               	infsnz	_i,f,c
   785  007D06  2A2D               	incf	_i+1,f,c
   786  007D08                     l1541:
   787  007D08  0E32               	movlw	low _buffer
   788  007D0A  242C               	addwf	_i,w,c
   789  007D0C  6ED9               	movwf	fsr2l,c
   790  007D0E  0E00               	movlw	high _buffer
   791  007D10  202D               	addwfc	_i+1,w,c
   792  007D12  6EDA               	movwf	fsr2h,c
   793  007D14  50DF               	movf	indf2,w,c
   794  007D16  A4D8               	btfss	status,2,c
   795  007D18  D7EA               	goto	l1535
   796                           
   797                           ;ADC.c: 143: }
   798                           ;ADC.c: 146: {
   799                           ;ADC.c: 147: onetone();
   800  007D1A  EC8F  F03B         	call	_onetone	;wreg free
   801                           
   802                           ;ADC.c: 148: PORTCbits.RC0=0;
   803  007D1E  9082               	bcf	3970,0,c	;volatile
   804                           
   805                           ;ADC.c: 150: delay_ms(500);
   806  007D20  0E01               	movlw	1
   807  007D22  6E47               	movwf	delay_ms@i+1,c
   808  007D24  0EF4               	movlw	244
   809  007D26  6E46               	movwf	delay_ms@i,c
   810  007D28  EC75  F03B         	call	_delay_ms	;wreg free
   811                           
   812                           ;ADC.c: 152: onetone();
   813  007D2C  EC8F  F03B         	call	_onetone	;wreg free
   814                           
   815                           ;ADC.c: 153: PORTCbits.RC0=0;
   816  007D30  9082               	bcf	3970,0,c	;volatile
   817                           
   818                           ;ADC.c: 154: delay_ms(3000);
   819  007D32  0E0B               	movlw	11
   820  007D34  6E47               	movwf	delay_ms@i+1,c
   821  007D36  0EB8               	movlw	184
   822  007D38  6E46               	movwf	delay_ms@i,c
   823  007D3A  EC75  F03B         	call	_delay_ms	;wreg free
   824                           
   825                           ;ADC.c: 156: onetone();
   826  007D3E  EC8F  F03B         	call	_onetone	;wreg free
   827                           
   828                           ;ADC.c: 157: PORTCbits.RC0=0;
   829  007D42  9082               	bcf	3970,0,c	;volatile
   830                           
   831                           ;ADC.c: 159: delay_ms(500);
   832  007D44  0E01               	movlw	1
   833  007D46  6E47               	movwf	delay_ms@i+1,c
   834  007D48  0EF4               	movlw	244
   835  007D4A  6E46               	movwf	delay_ms@i,c
   836  007D4C  EC75  F03B         	call	_delay_ms	;wreg free
   837                           
   838                           ;ADC.c: 161: onetone();
   839  007D50  EC8F  F03B         	call	_onetone	;wreg free
   840                           
   841                           ;ADC.c: 162: PORTCbits.RC0=0;
   842  007D54  9082               	bcf	3970,0,c	;volatile
   843                           
   844                           ;ADC.c: 163: delay_ms(3000);
   845  007D56  0E0B               	movlw	11
   846  007D58  6E47               	movwf	delay_ms@i+1,c
   847  007D5A  0EB8               	movlw	184
   848  007D5C  6E46               	movwf	delay_ms@i,c
   849  007D5E  EC75  F03B         	call	_delay_ms	;wreg free
   850                           
   851                           ;ADC.c: 166: }
   852                           ;ADC.c: 167: }
   853  007D62  D73C               	goto	l1483
   854  007D64                     l1553:
   855                           
   856                           ;ADC.c: 168: else if(ADRESH> 0x64 && ADRESH <0XA0)
   857  007D64  0E64               	movlw	100
   858  007D66  64C4               	cpfsgt	4036,c	;volatile
   859  007D68  D095               	goto	l1601
   860  007D6A  0EA0               	movlw	160
   861  007D6C  60C4               	cpfslt	4036,c	;volatile
   862  007D6E  D092               	goto	l1601
   863                           
   864                           ;ADC.c: 169: {
   865                           ;ADC.c: 172: lcd_write_cmd(0x80);
   866  007D70  0E80               	movlw	128
   867  007D72  EC23  F03C         	call	_lcd_write_cmd
   868                           
   869                           ;ADC.c: 174: for (i=0;Message4[i]!=0;i++)
   870  007D76  0E00               	movlw	0
   871  007D78  6E2D               	movwf	_i+1,c
   872  007D7A  0E00               	movlw	0
   873  007D7C  6E2C               	movwf	_i,c
   874  007D7E  D00D               	goto	l1567
   875  007D80                     l1561:
   876                           
   877                           ;ADC.c: 175: {
   878                           ;ADC.c: 176: outchar = Message4[i];
   879  007D80  0E20               	movlw	low _Message4
   880  007D82  242C               	addwf	_i,w,c
   881  007D84  6ED9               	movwf	fsr2l,c
   882  007D86  0E00               	movlw	high _Message4
   883  007D88  202D               	addwfc	_i+1,w,c
   884  007D8A  6EDA               	movwf	fsr2h,c
   885  007D8C  50DF               	movf	indf2,w,c
   886  007D8E  6E30               	movwf	_outchar,c
   887                           
   888                           ;ADC.c: 177: lcd_write_data(outchar);
   889  007D90  5030               	movf	_outchar,w,c
   890  007D92  ECD1  F03C         	call	_lcd_write_data
   891  007D96  4A2C               	infsnz	_i,f,c
   892  007D98  2A2D               	incf	_i+1,f,c
   893  007D9A                     l1567:
   894  007D9A  0E20               	movlw	low _Message4
   895  007D9C  242C               	addwf	_i,w,c
   896  007D9E  6ED9               	movwf	fsr2l,c
   897  007DA0  0E00               	movlw	high _Message4
   898  007DA2  202D               	addwfc	_i+1,w,c
   899  007DA4  6EDA               	movwf	fsr2h,c
   900  007DA6  50DF               	movf	indf2,w,c
   901  007DA8  A4D8               	btfss	status,2,c
   902  007DAA  D7EA               	goto	l1561
   903                           
   904                           ;ADC.c: 178: }
   905                           ;ADC.c: 180: sprintf(buffer,"Sensor value:  %d ", ADRESH);
   906  007DAC  0E32               	movlw	low _buffer
   907  007DAE  6E52               	movwf	sprintf@sp,c
   908  007DB0  0E00               	movlw	high _buffer
   909  007DB2  6E53               	movwf	sprintf@sp+1,c
   910  007DB4  0E21               	movlw	low STR_1
   911  007DB6  6E54               	movwf	sprintf@f,c
   912  007DB8  0E10               	movlw	high STR_1
   913  007DBA  6E55               	movwf	sprintf@f+1,c
   914  007DBC  CFC4 F056          	movff	4036,?_sprintf+4	;volatile
   915  007DC0  6A57               	clrf	?_sprintf+5,c
   916  007DC2  EC1B  F03D         	call	_sprintf	;wreg free
   917                           
   918                           ;ADC.c: 182: lcd_write_cmd(0xC0);
   919  007DC6  0EC0               	movlw	192
   920  007DC8  EC23  F03C         	call	_lcd_write_cmd
   921                           
   922                           ;ADC.c: 184: for (i=0;buffer[i]!=0;i++)
   923  007DCC  0E00               	movlw	0
   924  007DCE  6E2D               	movwf	_i+1,c
   925  007DD0  0E00               	movlw	0
   926  007DD2  6E2C               	movwf	_i,c
   927  007DD4  D00D               	goto	l1581
   928  007DD6                     l1575:
   929                           
   930                           ;ADC.c: 185: {
   931                           ;ADC.c: 186: outchar = buffer[i];
   932  007DD6  0E32               	movlw	low _buffer
   933  007DD8  242C               	addwf	_i,w,c
   934  007DDA  6ED9               	movwf	fsr2l,c
   935  007DDC  0E00               	movlw	high _buffer
   936  007DDE  202D               	addwfc	_i+1,w,c
   937  007DE0  6EDA               	movwf	fsr2h,c
   938  007DE2  50DF               	movf	indf2,w,c
   939  007DE4  6E30               	movwf	_outchar,c
   940                           
   941                           ;ADC.c: 187: lcd_write_data(outchar);
   942  007DE6  5030               	movf	_outchar,w,c
   943  007DE8  ECD1  F03C         	call	_lcd_write_data
   944  007DEC  4A2C               	infsnz	_i,f,c
   945  007DEE  2A2D               	incf	_i+1,f,c
   946  007DF0                     l1581:
   947  007DF0  0E32               	movlw	low _buffer
   948  007DF2  242C               	addwf	_i,w,c
   949  007DF4  6ED9               	movwf	fsr2l,c
   950  007DF6  0E00               	movlw	high _buffer
   951  007DF8  202D               	addwfc	_i+1,w,c
   952  007DFA  6EDA               	movwf	fsr2h,c
   953  007DFC  50DF               	movf	indf2,w,c
   954  007DFE  A4D8               	btfss	status,2,c
   955  007E00  D7EA               	goto	l1575
   956                           
   957                           ;ADC.c: 188: }
   958                           ;ADC.c: 191: {
   959                           ;ADC.c: 192: onetone();
   960  007E02  EC8F  F03B         	call	_onetone	;wreg free
   961                           
   962                           ;ADC.c: 193: PORTCbits.RC0=0;
   963  007E06  9082               	bcf	3970,0,c	;volatile
   964                           
   965                           ;ADC.c: 195: delay_ms(500);
   966  007E08  0E01               	movlw	1
   967  007E0A  6E47               	movwf	delay_ms@i+1,c
   968  007E0C  0EF4               	movlw	244
   969  007E0E  6E46               	movwf	delay_ms@i,c
   970  007E10  EC75  F03B         	call	_delay_ms	;wreg free
   971                           
   972                           ;ADC.c: 197: onetone();
   973  007E14  EC8F  F03B         	call	_onetone	;wreg free
   974                           
   975                           ;ADC.c: 198: PORTCbits.RC0=0;
   976  007E18  9082               	bcf	3970,0,c	;volatile
   977                           
   978                           ;ADC.c: 199: delay_ms(2000);
   979  007E1A  0E07               	movlw	7
   980  007E1C  6E47               	movwf	delay_ms@i+1,c
   981  007E1E  0ED0               	movlw	208
   982  007E20  6E46               	movwf	delay_ms@i,c
   983  007E22  EC75  F03B         	call	_delay_ms	;wreg free
   984                           
   985                           ;ADC.c: 201: onetone();
   986  007E26  EC8F  F03B         	call	_onetone	;wreg free
   987                           
   988                           ;ADC.c: 202: PORTCbits.RC0=0;
   989  007E2A  9082               	bcf	3970,0,c	;volatile
   990                           
   991                           ;ADC.c: 204: delay_ms(500);
   992  007E2C  0E01               	movlw	1
   993  007E2E  6E47               	movwf	delay_ms@i+1,c
   994  007E30  0EF4               	movlw	244
   995  007E32  6E46               	movwf	delay_ms@i,c
   996  007E34  EC75  F03B         	call	_delay_ms	;wreg free
   997                           
   998                           ;ADC.c: 206: onetone();
   999  007E38  EC8F  F03B         	call	_onetone	;wreg free
  1000                           
  1001                           ;ADC.c: 207: PORTCbits.RC0=0;
  1002  007E3C  9082               	bcf	3970,0,c	;volatile
  1003                           
  1004                           ;ADC.c: 208: delay_ms(2000);
  1005  007E3E  0E07               	movlw	7
  1006  007E40  6E47               	movwf	delay_ms@i+1,c
  1007  007E42  0ED0               	movlw	208
  1008  007E44  6E46               	movwf	delay_ms@i,c
  1009  007E46  EC75  F03B         	call	_delay_ms	;wreg free
  1010                           
  1011                           ;ADC.c: 210: onetone();
  1012  007E4A  EC8F  F03B         	call	_onetone	;wreg free
  1013                           
  1014                           ;ADC.c: 211: PORTCbits.RC0=0;
  1015  007E4E  9082               	bcf	3970,0,c	;volatile
  1016                           
  1017                           ;ADC.c: 213: delay_ms(500);
  1018  007E50  0E01               	movlw	1
  1019  007E52  6E47               	movwf	delay_ms@i+1,c
  1020  007E54  0EF4               	movlw	244
  1021  007E56  6E46               	movwf	delay_ms@i,c
  1022  007E58  EC75  F03B         	call	_delay_ms	;wreg free
  1023                           
  1024                           ;ADC.c: 215: onetone();
  1025  007E5C  EC8F  F03B         	call	_onetone	;wreg free
  1026                           
  1027                           ;ADC.c: 216: PORTCbits.RC0=0;
  1028  007E60  9082               	bcf	3970,0,c	;volatile
  1029                           
  1030                           ;ADC.c: 217: delay_ms(3000);
  1031  007E62  0E0B               	movlw	11
  1032  007E64  6E47               	movwf	delay_ms@i+1,c
  1033  007E66  0EB8               	movlw	184
  1034  007E68  6E46               	movwf	delay_ms@i,c
  1035  007E6A  EC75  F03B         	call	_delay_ms	;wreg free
  1036                           
  1037                           ;ADC.c: 219: onetone();
  1038  007E6E  EC8F  F03B         	call	_onetone	;wreg free
  1039                           
  1040                           ;ADC.c: 220: PORTCbits.RC0=0;
  1041  007E72  9082               	bcf	3970,0,c	;volatile
  1042                           
  1043                           ;ADC.c: 222: delay_ms(500);
  1044  007E74  0E01               	movlw	1
  1045  007E76  6E47               	movwf	delay_ms@i+1,c
  1046  007E78  0EF4               	movlw	244
  1047  007E7A  6E46               	movwf	delay_ms@i,c
  1048  007E7C  EC75  F03B         	call	_delay_ms	;wreg free
  1049                           
  1050                           ;ADC.c: 224: onetone();
  1051  007E80  EC8F  F03B         	call	_onetone	;wreg free
  1052                           
  1053                           ;ADC.c: 225: PORTCbits.RC0=0;
  1054  007E84  9082               	bcf	3970,0,c	;volatile
  1055                           
  1056                           ;ADC.c: 226: delay_ms(3000);
  1057  007E86  0E0B               	movlw	11
  1058  007E88  6E47               	movwf	delay_ms@i+1,c
  1059  007E8A  0EB8               	movlw	184
  1060  007E8C  6E46               	movwf	delay_ms@i,c
  1061  007E8E  EC75  F03B         	call	_delay_ms	;wreg free
  1062                           
  1063                           ;ADC.c: 229: }
  1064                           ;ADC.c: 231: }
  1065  007E92  D6A4               	goto	l1483
  1066  007E94                     l1601:
  1067                           
  1068                           ;ADC.c: 232: else
  1069                           ;ADC.c: 233: {
  1070                           ;ADC.c: 236: lcd_write_cmd(0x80);
  1071  007E94  0E80               	movlw	128
  1072  007E96  EC23  F03C         	call	_lcd_write_cmd
  1073                           
  1074                           ;ADC.c: 238: for (i=0;Message5[i]!=0;i++)
  1075  007E9A  0E00               	movlw	0
  1076  007E9C  6E2D               	movwf	_i+1,c
  1077  007E9E  0E00               	movlw	0
  1078  007EA0  6E2C               	movwf	_i,c
  1079  007EA2  D00D               	goto	l1611
  1080  007EA4                     l1605:
  1081                           
  1082                           ;ADC.c: 239: {
  1083                           ;ADC.c: 240: outchar = Message5[i];
  1084  007EA4  0E60               	movlw	low _Message5
  1085  007EA6  242C               	addwf	_i,w,c
  1086  007EA8  6ED9               	movwf	fsr2l,c
  1087  007EAA  0E00               	movlw	high _Message5
  1088  007EAC  202D               	addwfc	_i+1,w,c
  1089  007EAE  6EDA               	movwf	fsr2h,c
  1090  007EB0  50DF               	movf	indf2,w,c
  1091  007EB2  6E30               	movwf	_outchar,c
  1092                           
  1093                           ;ADC.c: 241: lcd_write_data(outchar);
  1094  007EB4  5030               	movf	_outchar,w,c
  1095  007EB6  ECD1  F03C         	call	_lcd_write_data
  1096  007EBA  4A2C               	infsnz	_i,f,c
  1097  007EBC  2A2D               	incf	_i+1,f,c
  1098  007EBE                     l1611:
  1099  007EBE  0E60               	movlw	low _Message5
  1100  007EC0  242C               	addwf	_i,w,c
  1101  007EC2  6ED9               	movwf	fsr2l,c
  1102  007EC4  0E00               	movlw	high _Message5
  1103  007EC6  202D               	addwfc	_i+1,w,c
  1104  007EC8  6EDA               	movwf	fsr2h,c
  1105  007ECA  50DF               	movf	indf2,w,c
  1106  007ECC  A4D8               	btfss	status,2,c
  1107  007ECE  D7EA               	goto	l1605
  1108                           
  1109                           ;ADC.c: 242: }
  1110                           ;ADC.c: 244: sprintf(buffer,"Sensor value:  %d ", ADRESH);
  1111  007ED0  0E32               	movlw	low _buffer
  1112  007ED2  6E52               	movwf	sprintf@sp,c
  1113  007ED4  0E00               	movlw	high _buffer
  1114  007ED6  6E53               	movwf	sprintf@sp+1,c
  1115  007ED8  0E21               	movlw	low STR_1
  1116  007EDA  6E54               	movwf	sprintf@f,c
  1117  007EDC  0E10               	movlw	high STR_1
  1118  007EDE  6E55               	movwf	sprintf@f+1,c
  1119  007EE0  CFC4 F056          	movff	4036,?_sprintf+4	;volatile
  1120  007EE4  6A57               	clrf	?_sprintf+5,c
  1121  007EE6  EC1B  F03D         	call	_sprintf	;wreg free
  1122                           
  1123                           ;ADC.c: 246: lcd_write_cmd(0xC0);
  1124  007EEA  0EC0               	movlw	192
  1125  007EEC  EC23  F03C         	call	_lcd_write_cmd
  1126                           
  1127                           ;ADC.c: 248: for (i=0;buffer[i]!=0;i++)
  1128  007EF0  0E00               	movlw	0
  1129  007EF2  6E2D               	movwf	_i+1,c
  1130  007EF4  0E00               	movlw	0
  1131  007EF6  6E2C               	movwf	_i,c
  1132  007EF8  D00D               	goto	l1625
  1133  007EFA                     l1619:
  1134                           
  1135                           ;ADC.c: 249: {
  1136                           ;ADC.c: 250: outchar = buffer[i];
  1137  007EFA  0E32               	movlw	low _buffer
  1138  007EFC  242C               	addwf	_i,w,c
  1139  007EFE  6ED9               	movwf	fsr2l,c
  1140  007F00  0E00               	movlw	high _buffer
  1141  007F02  202D               	addwfc	_i+1,w,c
  1142  007F04  6EDA               	movwf	fsr2h,c
  1143  007F06  50DF               	movf	indf2,w,c
  1144  007F08  6E30               	movwf	_outchar,c
  1145                           
  1146                           ;ADC.c: 251: lcd_write_data(outchar);
  1147  007F0A  5030               	movf	_outchar,w,c
  1148  007F0C  ECD1  F03C         	call	_lcd_write_data
  1149  007F10  4A2C               	infsnz	_i,f,c
  1150  007F12  2A2D               	incf	_i+1,f,c
  1151  007F14                     l1625:
  1152  007F14  0E32               	movlw	low _buffer
  1153  007F16  242C               	addwf	_i,w,c
  1154  007F18  6ED9               	movwf	fsr2l,c
  1155  007F1A  0E00               	movlw	high _buffer
  1156  007F1C  202D               	addwfc	_i+1,w,c
  1157  007F1E  6EDA               	movwf	fsr2h,c
  1158  007F20  50DF               	movf	indf2,w,c
  1159  007F22  A4D8               	btfss	status,2,c
  1160  007F24  D7EA               	goto	l1619
  1161                           
  1162                           ;ADC.c: 252: }
  1163                           ;ADC.c: 255: {
  1164                           ;ADC.c: 256: onetone();
  1165  007F26  EC8F  F03B         	call	_onetone	;wreg free
  1166                           
  1167                           ;ADC.c: 257: PORTCbits.RC0=0;
  1168  007F2A  9082               	bcf	3970,0,c	;volatile
  1169                           
  1170                           ;ADC.c: 259: delay_ms(500);
  1171  007F2C  0E01               	movlw	1
  1172  007F2E  6E47               	movwf	delay_ms@i+1,c
  1173  007F30  0EF4               	movlw	244
  1174  007F32  6E46               	movwf	delay_ms@i,c
  1175  007F34  EC75  F03B         	call	_delay_ms	;wreg free
  1176                           
  1177                           ;ADC.c: 261: onetone();
  1178  007F38  EC8F  F03B         	call	_onetone	;wreg free
  1179                           
  1180                           ;ADC.c: 262: PORTCbits.RC0=0;
  1181  007F3C  9082               	bcf	3970,0,c	;volatile
  1182                           
  1183                           ;ADC.c: 263: delay_ms(100);
  1184  007F3E  0E00               	movlw	0
  1185  007F40  6E47               	movwf	delay_ms@i+1,c
  1186  007F42  0E64               	movlw	100
  1187  007F44  6E46               	movwf	delay_ms@i,c
  1188  007F46  EC75  F03B         	call	_delay_ms	;wreg free
  1189                           
  1190                           ;ADC.c: 265: onetone();
  1191  007F4A  EC8F  F03B         	call	_onetone	;wreg free
  1192                           
  1193                           ;ADC.c: 266: PORTCbits.RC0=0;
  1194  007F4E  9082               	bcf	3970,0,c	;volatile
  1195                           
  1196                           ;ADC.c: 268: delay_ms(500);
  1197  007F50  0E01               	movlw	1
  1198  007F52  6E47               	movwf	delay_ms@i+1,c
  1199  007F54  0EF4               	movlw	244
  1200  007F56  6E46               	movwf	delay_ms@i,c
  1201  007F58  EC75  F03B         	call	_delay_ms	;wreg free
  1202                           
  1203                           ;ADC.c: 270: onetone();
  1204  007F5C  EC8F  F03B         	call	_onetone	;wreg free
  1205                           
  1206                           ;ADC.c: 271: PORTCbits.RC0=0;
  1207  007F60  9082               	bcf	3970,0,c	;volatile
  1208                           
  1209                           ;ADC.c: 272: delay_ms(100);
  1210  007F62  0E00               	movlw	0
  1211  007F64  6E47               	movwf	delay_ms@i+1,c
  1212  007F66  0E64               	movlw	100
  1213  007F68  6E46               	movwf	delay_ms@i,c
  1214  007F6A  EC75  F03B         	call	_delay_ms	;wreg free
  1215                           
  1216                           ;ADC.c: 274: onetone();
  1217  007F6E  EC8F  F03B         	call	_onetone	;wreg free
  1218                           
  1219                           ;ADC.c: 275: PORTCbits.RC0=0;
  1220  007F72  9082               	bcf	3970,0,c	;volatile
  1221                           
  1222                           ;ADC.c: 277: delay_ms(500);
  1223  007F74  0E01               	movlw	1
  1224  007F76  6E47               	movwf	delay_ms@i+1,c
  1225  007F78  0EF4               	movlw	244
  1226  007F7A  6E46               	movwf	delay_ms@i,c
  1227  007F7C  EC75  F03B         	call	_delay_ms	;wreg free
  1228                           
  1229                           ;ADC.c: 279: onetone();
  1230  007F80  EC8F  F03B         	call	_onetone	;wreg free
  1231                           
  1232                           ;ADC.c: 280: PORTCbits.RC0=0;
  1233  007F84  9082               	bcf	3970,0,c	;volatile
  1234                           
  1235                           ;ADC.c: 281: delay_ms(100);
  1236  007F86  0E00               	movlw	0
  1237  007F88  6E47               	movwf	delay_ms@i+1,c
  1238  007F8A  0E64               	movlw	100
  1239  007F8C  6E46               	movwf	delay_ms@i,c
  1240  007F8E  EC75  F03B         	call	_delay_ms	;wreg free
  1241                           
  1242                           ;ADC.c: 283: onetone();
  1243  007F92  EC8F  F03B         	call	_onetone	;wreg free
  1244                           
  1245                           ;ADC.c: 284: PORTCbits.RC0=0;
  1246  007F96  9082               	bcf	3970,0,c	;volatile
  1247                           
  1248                           ;ADC.c: 286: delay_ms(500);
  1249  007F98  0E01               	movlw	1
  1250  007F9A  6E47               	movwf	delay_ms@i+1,c
  1251  007F9C  0EF4               	movlw	244
  1252  007F9E  6E46               	movwf	delay_ms@i,c
  1253  007FA0  EC75  F03B         	call	_delay_ms	;wreg free
  1254                           
  1255                           ;ADC.c: 288: onetone();
  1256  007FA4  EC8F  F03B         	call	_onetone	;wreg free
  1257                           
  1258                           ;ADC.c: 289: PORTCbits.RC0=0;
  1259  007FA8  9082               	bcf	3970,0,c	;volatile
  1260                           
  1261                           ;ADC.c: 290: delay_ms(100);
  1262  007FAA  0E00               	movlw	0
  1263  007FAC  6E47               	movwf	delay_ms@i+1,c
  1264  007FAE  0E64               	movlw	100
  1265  007FB0  6E46               	movwf	delay_ms@i,c
  1266  007FB2  EC75  F03B         	call	_delay_ms	;wreg free
  1267                           
  1268                           ;ADC.c: 292: onetone();
  1269  007FB6  EC8F  F03B         	call	_onetone	;wreg free
  1270                           
  1271                           ;ADC.c: 293: PORTCbits.RC0=0;
  1272  007FBA  9082               	bcf	3970,0,c	;volatile
  1273                           
  1274                           ;ADC.c: 295: delay_ms(500);
  1275  007FBC  0E01               	movlw	1
  1276  007FBE  6E47               	movwf	delay_ms@i+1,c
  1277  007FC0  0EF4               	movlw	244
  1278  007FC2  6E46               	movwf	delay_ms@i,c
  1279  007FC4  EC75  F03B         	call	_delay_ms	;wreg free
  1280                           
  1281                           ;ADC.c: 297: onetone();
  1282  007FC8  EC8F  F03B         	call	_onetone	;wreg free
  1283                           
  1284                           ;ADC.c: 298: PORTCbits.RC0=0;
  1285  007FCC  9082               	bcf	3970,0,c	;volatile
  1286                           
  1287                           ;ADC.c: 299: delay_ms(100);
  1288  007FCE  0E00               	movlw	0
  1289  007FD0  6E47               	movwf	delay_ms@i+1,c
  1290  007FD2  0E64               	movlw	100
  1291  007FD4  6E46               	movwf	delay_ms@i,c
  1292  007FD6  EC75  F03B         	call	_delay_ms	;wreg free
  1293                           
  1294                           ;ADC.c: 301: onetone();
  1295  007FDA  EC8F  F03B         	call	_onetone	;wreg free
  1296                           
  1297                           ;ADC.c: 302: PORTCbits.RC0=0;
  1298  007FDE  9082               	bcf	3970,0,c	;volatile
  1299                           
  1300                           ;ADC.c: 304: delay_ms(500);
  1301  007FE0  0E01               	movlw	1
  1302  007FE2  6E47               	movwf	delay_ms@i+1,c
  1303  007FE4  0EF4               	movlw	244
  1304  007FE6  6E46               	movwf	delay_ms@i,c
  1305  007FE8  EC75  F03B         	call	_delay_ms	;wreg free
  1306                           
  1307                           ;ADC.c: 306: onetone();
  1308  007FEC  EC8F  F03B         	call	_onetone	;wreg free
  1309                           
  1310                           ;ADC.c: 307: PORTCbits.RC0=0;
  1311  007FF0  9082               	bcf	3970,0,c	;volatile
  1312                           
  1313                           ;ADC.c: 308: delay_ms(100);
  1314  007FF2  0E00               	movlw	0
  1315  007FF4  6E47               	movwf	delay_ms@i+1,c
  1316  007FF6  0E64               	movlw	100
  1317  007FF8  6E46               	movwf	delay_ms@i,c
  1318  007FFA  EC75  F03B         	call	_delay_ms	;wreg free
  1319  007FFE  D5EE               	goto	l1483
  1320  008000                     __end_of_main:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           postinc0	equ	0xFEE
  1327                           wreg	equ	0xFE8
  1328                           postdec1	equ	0xFE5
  1329                           fsr1l	equ	0xFE1
  1330                           indf2	equ	0xFDF
  1331                           fsr2h	equ	0xFDA
  1332                           fsr2l	equ	0xFD9
  1333                           status	equ	0xFD8
  1334                           
  1335 ;; *************** function _sprintf *****************
  1336 ;; Defined at:
  1337 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;  sp              2   12[COMRAM] PTR unsigned char 
  1340 ;;		 -> buffer(20), 
  1341 ;;  f               2   14[COMRAM] PTR const unsigned char 
  1342 ;;		 -> STR_4(19), STR_3(19), STR_2(19), STR_1(19), 
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  tmpval          4    0        struct .
  1345 ;;  cp              3    0        PTR const unsigned char 
  1346 ;;  val             2   23[COMRAM] unsigned int 
  1347 ;;  ap              2   19[COMRAM] PTR void [1]
  1348 ;;		 -> ?_sprintf(2), 
  1349 ;;  len             2    0        unsigned int 
  1350 ;;  c               1   25[COMRAM] char 
  1351 ;;  prec            1   22[COMRAM] char 
  1352 ;;  flag            1   21[COMRAM] unsigned char 
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  2   12[COMRAM] int 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1362 ;;      Params:         6       0       0       0       0       0       0       0       0
  1363 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1364 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1365 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1366 ;;Total ram usage:       14 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    1
  1369 ;; This function calls:
  1370 ;;		___lwdiv
  1371 ;;		___lwmod
  1372 ;; This function is called by:
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text1
  1378  007A36                     __ptext1:
  1379                           	opt stack 0
  1380  007A36                     _sprintf:
  1381                           	opt stack 29
  1382                           
  1383                           ;doprnt.c: 494: va_list ap;
  1384                           ;doprnt.c: 499: signed char c;
  1385                           ;doprnt.c: 506: signed char prec;
  1386                           ;doprnt.c: 508: unsigned char flag;
  1387                           ;doprnt.c: 523: union {
  1388                           ;doprnt.c: 524: unsigned long vd;
  1389                           ;doprnt.c: 525: double integ;
  1390                           ;doprnt.c: 526: } tmpval;
  1391                           ;doprnt.c: 528: unsigned int val;
  1392                           ;doprnt.c: 529: unsigned len;
  1393                           ;doprnt.c: 530: const char * cp;
  1394                           ;doprnt.c: 533: *ap = __va_start();
  1395                           
  1396                           ;incstack = 0
  1397  007A36  0E56               	movlw	low (?_sprintf+4)
  1398  007A38  6E59               	movwf	sprintf@ap,c
  1399  007A3A  0E00               	movlw	high (?_sprintf+4)
  1400  007A3C  6E5A               	movwf	sprintf@ap+1,c
  1401                           
  1402                           ;doprnt.c: 536: while(c = *f++) {
  1403  007A3E  D08C               	goto	l1453
  1404  007A40                     l1401:
  1405                           
  1406                           ;doprnt.c: 538: if(c != '%')
  1407  007A40  0E25               	movlw	37
  1408  007A42  185F               	xorwf	sprintf@c,w,c
  1409  007A44  B4D8               	btfsc	status,2,c
  1410  007A46  D009               	goto	l1407
  1411                           
  1412                           ;doprnt.c: 540: {
  1413                           ;doprnt.c: 541: ((*sp++ = (c)));
  1414  007A48  C052  FFD9         	movff	sprintf@sp,fsr2l
  1415  007A4C  C053  FFDA         	movff	sprintf@sp+1,fsr2h
  1416  007A50  C05F  FFDF         	movff	sprintf@c,indf2
  1417  007A54  4A52               	infsnz	sprintf@sp,f,c
  1418  007A56  2A53               	incf	sprintf@sp+1,f,c
  1419                           
  1420                           ;doprnt.c: 542: continue;
  1421  007A58  D07F               	goto	l1453
  1422  007A5A                     l1407:
  1423                           
  1424                           ;doprnt.c: 543: }
  1425                           ;doprnt.c: 548: flag = 0;
  1426  007A5A  0E00               	movlw	0
  1427  007A5C  6E5B               	movwf	sprintf@flag,c
  1428                           
  1429                           ;doprnt.c: 822: }
  1430                           
  1431                           ;doprnt.c: 813: continue;
  1432                           
  1433                           ;doprnt.c: 802: default:
  1434                           
  1435                           ;doprnt.c: 698: case 'i':
  1436                           ;doprnt.c: 699: break;
  1437                           
  1438                           ;doprnt.c: 697: case 'd':
  1439                           
  1440                           ;doprnt.c: 638: goto alldone;
  1441                           
  1442                           ;doprnt.c: 637: case 0:
  1443                           
  1444                           ;doprnt.c: 635: switch(c = *f++) {
  1445  007A5E  C054  FFF6         	movff	sprintf@f,tblptrl
  1446  007A62  C055  FFF7         	movff	sprintf@f+1,tblptrh
  1447  007A66  4A54               	infsnz	sprintf@f,f,c
  1448  007A68  2A55               	incf	sprintf@f+1,f,c
  1449  007A6A                     	if	0	;tblptru may be non-zero
  1450  007A6A                     	endif
  1451  007A6A                     	if	0	;tblptru may be non-zero
  1452  007A6A                     	endif
  1453  007A6A  0008               	tblrd		*
  1454  007A6C  CFF5 F05F          	movff	tablat,sprintf@c
  1455  007A70  505F               	movf	sprintf@c,w,c
  1456                           
  1457                           ; Switch size 1, requested type "space"
  1458                           ; Number of cases is 3, Range of values is 0 to 105
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte           10     6 (average)
  1462                           ;	Chosen strategy is simple_byte
  1463  007A72  0A00               	xorlw	0	; case 0
  1464  007A74  B4D8               	btfsc	status,2,c
  1465  007A76  D07C               	goto	l1455
  1466  007A78  0A64               	xorlw	100	; case 100
  1467  007A7A  B4D8               	btfsc	status,2,c
  1468  007A7C  D003               	goto	l1413
  1469  007A7E  0A0D               	xorlw	13	; case 105
  1470  007A80  A4D8               	btfss	status,2,c
  1471  007A82  D06A               	goto	l1453
  1472  007A84                     l1413:
  1473                           
  1474                           ;doprnt.c: 1253: {
  1475                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1476  007A84  C059  FFD9         	movff	sprintf@ap,fsr2l
  1477  007A88  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  1478  007A8C  CFDE F05D          	movff	postinc2,sprintf@val
  1479  007A90  CFDD F05E          	movff	postdec2,sprintf@val+1
  1480  007A94  0E02               	movlw	2
  1481  007A96  2659               	addwf	sprintf@ap,f,c
  1482  007A98  0E00               	movlw	0
  1483  007A9A  225A               	addwfc	sprintf@ap+1,f,c
  1484                           
  1485                           ;doprnt.c: 1261: if((int)val < 0) {
  1486  007A9C  AE5E               	btfss	sprintf@val+1,7,c
  1487  007A9E  D006               	goto	l1423
  1488                           
  1489                           ;doprnt.c: 1262: flag |= 0x03;
  1490  007AA0  0E03               	movlw	3
  1491  007AA2  125B               	iorwf	sprintf@flag,f,c
  1492                           
  1493                           ;doprnt.c: 1263: val = -val;
  1494  007AA4  6C5D               	negf	sprintf@val,c
  1495  007AA6  1E5E               	comf	sprintf@val+1,f,c
  1496  007AA8  B0D8               	btfsc	status,0,c
  1497  007AAA  2A5E               	incf	sprintf@val+1,f,c
  1498  007AAC                     l1423:
  1499                           
  1500                           ;doprnt.c: 1264: }
  1501                           ;doprnt.c: 1266: }
  1502                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1503  007AAC  0E01               	movlw	1
  1504  007AAE  6E5F               	movwf	sprintf@c,c
  1505  007AB0                     l1425:
  1506  007AB0  0E05               	movlw	5
  1507  007AB2  185F               	xorwf	sprintf@c,w,c
  1508  007AB4  B4D8               	btfsc	status,2,c
  1509  007AB6  D012               	goto	l1437
  1510                           
  1511                           ;doprnt.c: 1306: if(val < dpowers[c])
  1512  007AB8  505F               	movf	sprintf@c,w,c
  1513  007ABA  0D02               	mullw	2
  1514  007ABC  0E17               	movlw	low _dpowers
  1515  007ABE  24F3               	addwf	prodl,w,c
  1516  007AC0  6EF6               	movwf	tblptrl,c
  1517  007AC2  0E10               	movlw	high _dpowers
  1518  007AC4  20F4               	addwfc	prodh,w,c
  1519  007AC6  6EF7               	movwf	tblptrh,c
  1520  007AC8                     	if	0	;There are less than 3 active tblptr bytes
  1521  007AC8                     	endif
  1522  007AC8  0009               	tblrd		*+
  1523  007ACA  50F5               	movf	tablat,w,c
  1524  007ACC  5C5D               	subwf	sprintf@val,w,c
  1525  007ACE  0009               	tblrd		*+
  1526  007AD0  50F5               	movf	tablat,w,c
  1527  007AD2  585E               	subwfb	sprintf@val+1,w,c
  1528  007AD4  A0D8               	btfss	status,0,c
  1529  007AD6  D002               	goto	l1437
  1530                           
  1531                           ;doprnt.c: 1307: break;
  1532  007AD8  2A5F               	incf	sprintf@c,f,c
  1533  007ADA  D7EA               	goto	l1425
  1534  007ADC                     l1437:
  1535                           
  1536                           ;doprnt.c: 1422: {
  1537                           ;doprnt.c: 1438: if(flag & 0x03)
  1538  007ADC  C05B  F058         	movff	sprintf@flag,??_sprintf
  1539  007AE0  0E03               	movlw	3
  1540  007AE2  1658               	andwf	??_sprintf,f,c
  1541  007AE4  B4D8               	btfsc	status,2,c
  1542  007AE6  D008               	goto	l1443
  1543                           
  1544                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1545  007AE8  C052  FFD9         	movff	sprintf@sp,fsr2l
  1546  007AEC  C053  FFDA         	movff	sprintf@sp+1,fsr2h
  1547  007AF0  0E2D               	movlw	45
  1548  007AF2  6EDF               	movwf	indf2,c
  1549  007AF4  4A52               	infsnz	sprintf@sp,f,c
  1550  007AF6  2A53               	incf	sprintf@sp+1,f,c
  1551  007AF8                     l1443:
  1552                           
  1553                           ;doprnt.c: 1469: }
  1554                           ;doprnt.c: 1472: prec = c;
  1555  007AF8  C05F  F05C         	movff	sprintf@c,sprintf@prec
  1556                           
  1557                           ;doprnt.c: 1474: while(prec--) {
  1558  007AFC  D029               	goto	l1451
  1559  007AFE                     l1445:
  1560                           
  1561                           ;doprnt.c: 1478: {
  1562                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1563  007AFE  505C               	movf	sprintf@prec,w,c
  1564  007B00  0D02               	mullw	2
  1565  007B02  0E17               	movlw	low _dpowers
  1566  007B04  24F3               	addwf	prodl,w,c
  1567  007B06  6EF6               	movwf	tblptrl,c
  1568  007B08  0E10               	movlw	high _dpowers
  1569  007B0A  20F4               	addwfc	prodh,w,c
  1570  007B0C  6EF7               	movwf	tblptrh,c
  1571  007B0E                     	if	0	;There are less than 3 active tblptr bytes
  1572  007B0E                     	endif
  1573  007B0E  0009               	tblrd		*+
  1574  007B10  CFF5 F048          	movff	tablat,___lwdiv@divisor
  1575  007B14  000A               	tblrd		*-
  1576  007B16  CFF5 F049          	movff	tablat,___lwdiv@divisor+1
  1577  007B1A  C05D  F046         	movff	sprintf@val,___lwdiv@dividend
  1578  007B1E  C05E  F047         	movff	sprintf@val+1,___lwdiv@dividend+1
  1579  007B22  ECCF  F03B         	call	___lwdiv	;wreg free
  1580  007B26  C046  F04D         	movff	?___lwdiv,___lwmod@dividend
  1581  007B2A  C047  F04E         	movff	?___lwdiv+1,___lwmod@dividend+1
  1582  007B2E  0E00               	movlw	0
  1583  007B30  6E50               	movwf	___lwmod@divisor+1,c
  1584  007B32  0E0A               	movlw	10
  1585  007B34  6E4F               	movwf	___lwmod@divisor,c
  1586  007B36  ECAE  F03B         	call	___lwmod	;wreg free
  1587  007B3A  504D               	movf	?___lwmod,w,c
  1588  007B3C  0F30               	addlw	48
  1589  007B3E  6E5F               	movwf	sprintf@c,c
  1590                           
  1591                           ;doprnt.c: 1523: }
  1592                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1593  007B40  C052  FFD9         	movff	sprintf@sp,fsr2l
  1594  007B44  C053  FFDA         	movff	sprintf@sp+1,fsr2h
  1595  007B48  C05F  FFDF         	movff	sprintf@c,indf2
  1596  007B4C  4A52               	infsnz	sprintf@sp,f,c
  1597  007B4E  2A53               	incf	sprintf@sp+1,f,c
  1598  007B50                     l1451:
  1599  007B50  065C               	decf	sprintf@prec,f,c
  1600  007B52  285C               	incf	sprintf@prec,w,c
  1601  007B54  A4D8               	btfss	status,2,c
  1602  007B56  D7D3               	goto	l1445
  1603  007B58                     l1453:
  1604  007B58  C054  FFF6         	movff	sprintf@f,tblptrl
  1605  007B5C  C055  FFF7         	movff	sprintf@f+1,tblptrh
  1606  007B60  4A54               	infsnz	sprintf@f,f,c
  1607  007B62  2A55               	incf	sprintf@f+1,f,c
  1608  007B64                     	if	0	;tblptru may be non-zero
  1609  007B64                     	endif
  1610  007B64                     	if	0	;tblptru may be non-zero
  1611  007B64                     	endif
  1612  007B64  0008               	tblrd		*
  1613  007B66  CFF5 F05F          	movff	tablat,sprintf@c
  1614  007B6A  505F               	movf	sprintf@c,w,c
  1615  007B6C  A4D8               	btfss	status,2,c
  1616  007B6E  D768               	goto	l1401
  1617  007B70                     l1455:
  1618                           
  1619                           ;doprnt.c: 1538: *sp = 0;
  1620  007B70  C052  FFD9         	movff	sprintf@sp,fsr2l
  1621  007B74  C053  FFDA         	movff	sprintf@sp+1,fsr2h
  1622  007B78  0E00               	movlw	0
  1623  007B7A  6EDF               	movwf	indf2,c
  1624  007B7C  0012               	return	
  1625  007B7E                     __end_of_sprintf:
  1626                           	opt stack 0
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           prodh	equ	0xFF4
  1632                           prodl	equ	0xFF3
  1633                           postinc0	equ	0xFEE
  1634                           wreg	equ	0xFE8
  1635                           postdec1	equ	0xFE5
  1636                           fsr1l	equ	0xFE1
  1637                           indf2	equ	0xFDF
  1638                           postinc2	equ	0xFDE
  1639                           postdec2	equ	0xFDD
  1640                           fsr2h	equ	0xFDA
  1641                           fsr2l	equ	0xFD9
  1642                           status	equ	0xFD8
  1643                           
  1644 ;; *************** function ___lwmod *****************
  1645 ;; Defined at:
  1646 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwmod.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  dividend        2    7[COMRAM] unsigned int 
  1649 ;;  divisor         2    9[COMRAM] unsigned int 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  counter         1   11[COMRAM] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  2    7[COMRAM] unsigned int 
  1654 ;; Registers used:
  1655 ;;		wreg, status,2, status,0
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1661 ;;      Params:         4       0       0       0       0       0       0       0       0
  1662 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1664 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1665 ;;Total ram usage:        5 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; This function calls:
  1668 ;;		Nothing
  1669 ;; This function is called by:
  1670 ;;		_sprintf
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674                           	psect	text2
  1675  00775C                     __ptext2:
  1676                           	opt stack 0
  1677  00775C                     ___lwmod:
  1678                           	opt stack 29
  1679                           
  1680                           ;incstack = 0
  1681  00775C  504F               	movf	___lwmod@divisor,w,c
  1682  00775E  1050               	iorwf	___lwmod@divisor+1,w,c
  1683  007760  B4D8               	btfsc	status,2,c
  1684  007762  D018               	goto	l600
  1685  007764  0E01               	movlw	1
  1686  007766  6E51               	movwf	___lwmod@counter,c
  1687  007768  D004               	goto	l1313
  1688  00776A                     l1311:
  1689  00776A  90D8               	bcf	status,0,c
  1690  00776C  364F               	rlcf	___lwmod@divisor,f,c
  1691  00776E  3650               	rlcf	___lwmod@divisor+1,f,c
  1692  007770  2A51               	incf	___lwmod@counter,f,c
  1693  007772                     l1313:
  1694  007772  AE50               	btfss	___lwmod@divisor+1,7,c
  1695  007774  D7FA               	goto	l1311
  1696  007776                     l1315:
  1697  007776  504F               	movf	___lwmod@divisor,w,c
  1698  007778  5C4D               	subwf	___lwmod@dividend,w,c
  1699  00777A  5050               	movf	___lwmod@divisor+1,w,c
  1700  00777C  584E               	subwfb	___lwmod@dividend+1,w,c
  1701  00777E  A0D8               	btfss	status,0,c
  1702  007780  D004               	goto	l1319
  1703  007782  504F               	movf	___lwmod@divisor,w,c
  1704  007784  5E4D               	subwf	___lwmod@dividend,f,c
  1705  007786  5050               	movf	___lwmod@divisor+1,w,c
  1706  007788  5A4E               	subwfb	___lwmod@dividend+1,f,c
  1707  00778A                     l1319:
  1708  00778A  90D8               	bcf	status,0,c
  1709  00778C  3250               	rrcf	___lwmod@divisor+1,f,c
  1710  00778E  324F               	rrcf	___lwmod@divisor,f,c
  1711  007790  2E51               	decfsz	___lwmod@counter,f,c
  1712  007792  D7F1               	goto	l1315
  1713  007794                     l600:
  1714  007794  C04D  F04D         	movff	___lwmod@dividend,?___lwmod
  1715  007798  C04E  F04E         	movff	___lwmod@dividend+1,?___lwmod+1
  1716  00779C  0012               	return		;funcret
  1717  00779E                     __end_of___lwmod:
  1718                           	opt stack 0
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           prodh	equ	0xFF4
  1724                           prodl	equ	0xFF3
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           indf2	equ	0xFDF
  1730                           postinc2	equ	0xFDE
  1731                           postdec2	equ	0xFDD
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _onetone *****************
  1737 ;; Defined at:
  1738 ;;		line 34 in file "ADC.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;		None
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  k               2   14[COMRAM] unsigned int 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;		None               void
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0, cstack
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0
  1753 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1754 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1755 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1756 ;;Total ram usage:        3 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    2
  1759 ;; This function calls:
  1760 ;;		_delay_us
  1761 ;; This function is called by:
  1762 ;;		_main
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text3
  1767  00771E                     __ptext3:
  1768                           	opt stack 0
  1769  00771E                     _onetone:
  1770                           	opt stack 28
  1771                           
  1772                           ;ADC.c: 36: unsigned int k;
  1773                           ;ADC.c: 38: for (k = 0; k < 100; k++)
  1774                           
  1775                           ;incstack = 0
  1776  00771E  0E00               	movlw	0
  1777  007720  6E55               	movwf	onetone@k+1,c
  1778  007722  0E00               	movlw	0
  1779  007724  6E54               	movwf	onetone@k,c
  1780  007726                     l1387:
  1781  007726  5055               	movf	onetone@k+1,w,c
  1782  007728  E118               	bnz	l117
  1783  00772A  0E64               	movlw	100
  1784  00772C  5C54               	subwf	onetone@k,w,c
  1785  00772E  B0D8               	btfsc	status,0,c
  1786  007730  0012               	return	
  1787                           
  1788                           ;ADC.c: 39: {
  1789                           ;ADC.c: 40: delay_us(3000);
  1790  007732  0E0B               	movlw	11
  1791  007734  6E4E               	movwf	delay_us@i+1,c
  1792  007736  0EB8               	movlw	184
  1793  007738  6E4D               	movwf	delay_us@i,c
  1794  00773A  EC94  F03C         	call	_delay_us	;wreg free
  1795                           
  1796                           ;ADC.c: 41: PORTCbits.RC0 = !PORTCbits.RC0;
  1797  00773E  B082               	btfsc	3970,0,c	;volatile
  1798  007740  D003               	goto	u600
  1799  007742  6A53               	clrf	??_onetone& (0+255),c
  1800  007744  2A53               	incf	??_onetone& (0+255),f,c
  1801  007746  D001               	goto	u618
  1802  007748                     u600:
  1803  007748  6A53               	clrf	??_onetone& (0+255),c
  1804  00774A                     u618:
  1805  00774A  5082               	movf	3970,w,c	;volatile
  1806  00774C  1853               	xorwf	??_onetone,w,c
  1807  00774E  0BFE               	andlw	-2
  1808  007750  1853               	xorwf	??_onetone,w,c
  1809  007752  6E82               	movwf	3970,c	;volatile
  1810  007754  4A54               	infsnz	onetone@k,f,c
  1811  007756  2A55               	incf	onetone@k+1,f,c
  1812  007758  D7E6               	goto	l1387
  1813  00775A                     l117:
  1814  00775A  0012               	return		;funcret
  1815  00775C                     __end_of_onetone:
  1816                           	opt stack 0
  1817                           tblptru	equ	0xFF8
  1818                           tblptrh	equ	0xFF7
  1819                           tblptrl	equ	0xFF6
  1820                           tablat	equ	0xFF5
  1821                           prodh	equ	0xFF4
  1822                           prodl	equ	0xFF3
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1l	equ	0xFE1
  1827                           indf2	equ	0xFDF
  1828                           postinc2	equ	0xFDE
  1829                           postdec2	equ	0xFDD
  1830                           fsr2h	equ	0xFDA
  1831                           fsr2l	equ	0xFD9
  1832                           status	equ	0xFD8
  1833                           
  1834 ;; *************** function _delay_us *****************
  1835 ;; Defined at:
  1836 ;;		line 17 in file "delays_utilities.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  i               2    7[COMRAM] unsigned int 
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;  lower           2   11[COMRAM] unsigned int 
  1841 ;;  j               2    9[COMRAM] unsigned int 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;		None               void
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1851 ;;      Params:         2       0       0       0       0       0       0       0       0
  1852 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1854 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1855 ;;Total ram usage:        6 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    1
  1858 ;; This function calls:
  1859 ;;		___lwdiv
  1860 ;; This function is called by:
  1861 ;;		_onetone
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text4
  1866  007928                     __ptext4:
  1867                           	opt stack 0
  1868  007928                     _delay_us:
  1869                           	opt stack 28
  1870                           
  1871                           ;delays_utilities.c: 19: unsigned int j,lower;
  1872                           ;delays_utilities.c: 22: lower = i;
  1873                           
  1874                           ;incstack = 0
  1875  007928  C04D  F051         	movff	delay_us@i,delay_us@lower
  1876  00792C  C04E  F052         	movff	delay_us@i+1,delay_us@lower+1
  1877                           
  1878                           ;delays_utilities.c: 23: lower = lower/20;
  1879  007930  C051  F046         	movff	delay_us@lower,___lwdiv@dividend
  1880  007934  C052  F047         	movff	delay_us@lower+1,___lwdiv@dividend+1
  1881  007938  0E00               	movlw	0
  1882  00793A  6E49               	movwf	___lwdiv@divisor+1,c
  1883  00793C  0E14               	movlw	20
  1884  00793E  6E48               	movwf	___lwdiv@divisor,c
  1885  007940  ECCF  F03B         	call	___lwdiv	;wreg free
  1886  007944  C046  F051         	movff	?___lwdiv,delay_us@lower
  1887  007948  C047  F052         	movff	?___lwdiv+1,delay_us@lower+1
  1888                           
  1889                           ;delays_utilities.c: 25: if (i< 5)
  1890  00794C  504E               	movf	delay_us@i+1,w,c
  1891  00794E  E104               	bnz	l1293
  1892  007950  0E05               	movlw	5
  1893  007952  5C4D               	subwf	delay_us@i,w,c
  1894  007954  A0D8               	btfss	status,0,c
  1895  007956  0012               	return	
  1896  007958                     l1293:
  1897                           
  1898                           ;delays_utilities.c: 29: else
  1899                           ;delays_utilities.c: 30: if(i<10)
  1900  007958  504E               	movf	delay_us@i+1,w,c
  1901  00795A  E108               	bnz	l1297
  1902  00795C  0E0A               	movlw	10
  1903  00795E  5C4D               	subwf	delay_us@i,w,c
  1904  007960  B0D8               	btfsc	status,0,c
  1905  007962  D004               	goto	l1297
  1906                           
  1907                           ;delays_utilities.c: 31: {
  1908                           ;delays_utilities.c: 32: _delay((unsigned long)((7)*(48000000/4000000.0)));
  1909  007964  0E1C               	movlw	28
  1910  007966                     u867:
  1911  007966  2EE8               	decfsz	wreg,f,c
  1912  007968  D7FE               	goto	u867
  1913                           
  1914                           ;delays_utilities.c: 33: }
  1915  00796A  0012               	return	
  1916  00796C                     l1297:
  1917                           
  1918                           ;delays_utilities.c: 34: else if(i< 20)
  1919  00796C  504E               	movf	delay_us@i+1,w,c
  1920  00796E  E108               	bnz	l1301
  1921  007970  0E14               	movlw	20
  1922  007972  5C4D               	subwf	delay_us@i,w,c
  1923  007974  B0D8               	btfsc	status,0,c
  1924  007976  D004               	goto	l1301
  1925                           
  1926                           ;delays_utilities.c: 35: {
  1927                           ;delays_utilities.c: 36: _delay((unsigned long)((15)*(48000000/4000000.0)));
  1928  007978  0E3C               	movlw	60
  1929  00797A                     u877:
  1930  00797A  2EE8               	decfsz	wreg,f,c
  1931  00797C  D7FE               	goto	u877
  1932                           
  1933                           ;delays_utilities.c: 37: }
  1934  00797E  0012               	return	
  1935  007980                     l1301:
  1936                           
  1937                           ;delays_utilities.c: 38: else
  1938                           ;delays_utilities.c: 39: for(j=0;j<lower;j++)_delay((unsigned long)((20)*(48000000/40000
      +                          00.0)));
  1939  007980  0E00               	movlw	0
  1940  007982  6E50               	movwf	delay_us@j+1,c
  1941  007984  0E00               	movlw	0
  1942  007986  6E4F               	movwf	delay_us@j,c
  1943  007988  D005               	goto	l58
  1944  00798A                     l1303:
  1945  00798A  0E50               	movlw	80
  1946  00798C                     u887:
  1947  00798C  2EE8               	decfsz	wreg,f,c
  1948  00798E  D7FE               	goto	u887
  1949  007990  4A4F               	infsnz	delay_us@j,f,c
  1950  007992  2A50               	incf	delay_us@j+1,f,c
  1951  007994                     l58:
  1952  007994  5051               	movf	delay_us@lower,w,c
  1953  007996  5C4F               	subwf	delay_us@j,w,c
  1954  007998  5052               	movf	delay_us@lower+1,w,c
  1955  00799A  5850               	subwfb	delay_us@j+1,w,c
  1956  00799C  B0D8               	btfsc	status,0,c
  1957  00799E  0012               	return	
  1958  0079A0  D7F4               	goto	l1303
  1959  0079A2                     __end_of_delay_us:
  1960                           	opt stack 0
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           prodh	equ	0xFF4
  1966                           prodl	equ	0xFF3
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           fsr1l	equ	0xFE1
  1971                           indf2	equ	0xFDF
  1972                           postinc2	equ	0xFDE
  1973                           postdec2	equ	0xFDD
  1974                           fsr2h	equ	0xFDA
  1975                           fsr2l	equ	0xFD9
  1976                           status	equ	0xFD8
  1977                           
  1978 ;; *************** function ___lwdiv *****************
  1979 ;; Defined at:
  1980 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  dividend        2    0[COMRAM] unsigned int 
  1983 ;;  divisor         2    2[COMRAM] unsigned int 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  quotient        2    4[COMRAM] unsigned int 
  1986 ;;  counter         1    6[COMRAM] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  2    0[COMRAM] unsigned int 
  1989 ;; Registers used:
  1990 ;;		wreg, status,2, status,0
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1996 ;;      Params:         4       0       0       0       0       0       0       0       0
  1997 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1998 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1999 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2000 ;;Total ram usage:        7 bytes
  2001 ;; Hardware stack levels used:    1
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_delay_us
  2006 ;;		_sprintf
  2007 ;; This function uses a non-reentrant model
  2008 ;;
  2009                           
  2010                           	psect	text5
  2011  00779E                     __ptext5:
  2012                           	opt stack 0
  2013  00779E                     ___lwdiv:
  2014                           	opt stack 29
  2015                           
  2016                           ;incstack = 0
  2017  00779E  0E00               	movlw	0
  2018  0077A0  6E4B               	movwf	___lwdiv@quotient+1,c
  2019  0077A2  0E00               	movlw	0
  2020  0077A4  6E4A               	movwf	___lwdiv@quotient,c
  2021  0077A6  5048               	movf	___lwdiv@divisor,w,c
  2022  0077A8  1049               	iorwf	___lwdiv@divisor+1,w,c
  2023  0077AA  B4D8               	btfsc	status,2,c
  2024  0077AC  D01C               	goto	l590
  2025  0077AE  0E01               	movlw	1
  2026  0077B0  6E4C               	movwf	___lwdiv@counter,c
  2027  0077B2  D004               	goto	l1243
  2028  0077B4                     l1241:
  2029  0077B4  90D8               	bcf	status,0,c
  2030  0077B6  3648               	rlcf	___lwdiv@divisor,f,c
  2031  0077B8  3649               	rlcf	___lwdiv@divisor+1,f,c
  2032  0077BA  2A4C               	incf	___lwdiv@counter,f,c
  2033  0077BC                     l1243:
  2034  0077BC  AE49               	btfss	___lwdiv@divisor+1,7,c
  2035  0077BE  D7FA               	goto	l1241
  2036  0077C0                     l1245:
  2037  0077C0  90D8               	bcf	status,0,c
  2038  0077C2  364A               	rlcf	___lwdiv@quotient,f,c
  2039  0077C4  364B               	rlcf	___lwdiv@quotient+1,f,c
  2040  0077C6  5048               	movf	___lwdiv@divisor,w,c
  2041  0077C8  5C46               	subwf	___lwdiv@dividend,w,c
  2042  0077CA  5049               	movf	___lwdiv@divisor+1,w,c
  2043  0077CC  5847               	subwfb	___lwdiv@dividend+1,w,c
  2044  0077CE  A0D8               	btfss	status,0,c
  2045  0077D0  D005               	goto	l1253
  2046  0077D2  5048               	movf	___lwdiv@divisor,w,c
  2047  0077D4  5E46               	subwf	___lwdiv@dividend,f,c
  2048  0077D6  5049               	movf	___lwdiv@divisor+1,w,c
  2049  0077D8  5A47               	subwfb	___lwdiv@dividend+1,f,c
  2050  0077DA  804A               	bsf	___lwdiv@quotient,0,c
  2051  0077DC                     l1253:
  2052  0077DC  90D8               	bcf	status,0,c
  2053  0077DE  3249               	rrcf	___lwdiv@divisor+1,f,c
  2054  0077E0  3248               	rrcf	___lwdiv@divisor,f,c
  2055  0077E2  2E4C               	decfsz	___lwdiv@counter,f,c
  2056  0077E4  D7ED               	goto	l1245
  2057  0077E6                     l590:
  2058  0077E6  C04A  F046         	movff	___lwdiv@quotient,?___lwdiv
  2059  0077EA  C04B  F047         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2060  0077EE  0012               	return		;funcret
  2061  0077F0                     __end_of___lwdiv:
  2062                           	opt stack 0
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           prodh	equ	0xFF4
  2068                           prodl	equ	0xFF3
  2069                           postinc0	equ	0xFEE
  2070                           wreg	equ	0xFE8
  2071                           postdec1	equ	0xFE5
  2072                           fsr1l	equ	0xFE1
  2073                           indf2	equ	0xFDF
  2074                           postinc2	equ	0xFDE
  2075                           postdec2	equ	0xFDD
  2076                           fsr2h	equ	0xFDA
  2077                           fsr2l	equ	0xFD9
  2078                           status	equ	0xFD8
  2079                           
  2080 ;; *************** function _lcd_write_data *****************
  2081 ;; Defined at:
  2082 ;;		line 43 in file "lcd_utilities.c"
  2083 ;; Parameters:    Size  Location     Type
  2084 ;;  data            1    wreg     unsigned char 
  2085 ;; Auto vars:     Size  Location     Type
  2086 ;;  data            1    2[COMRAM] unsigned char 
  2087 ;;  temp1           1    3[COMRAM] unsigned char 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;		None               void
  2090 ;; Registers used:
  2091 ;;		wreg, status,2, status,0, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2097 ;;      Params:         0       0       0       0       0       0       0       0       0
  2098 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2099 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2100 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2101 ;;Total ram usage:        3 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    1
  2104 ;; This function calls:
  2105 ;;		_lcd_strobe
  2106 ;; This function is called by:
  2107 ;;		_main
  2108 ;; This function uses a non-reentrant model
  2109 ;;
  2110                           
  2111                           	psect	text6
  2112  0079A2                     __ptext6:
  2113                           	opt stack 0
  2114  0079A2                     _lcd_write_data:
  2115                           	opt stack 29
  2116                           
  2117                           ;incstack = 0
  2118                           ;lcd_write_data@data stored from wreg
  2119  0079A2  6E48               	movwf	lcd_write_data@data,c
  2120                           
  2121                           ;lcd_utilities.c: 45: char temp1;
  2122                           ;lcd_utilities.c: 47: PORTDbits.RD6 = 1;
  2123  0079A4  8C83               	bsf	3971,6,c	;volatile
  2124                           
  2125                           ;lcd_utilities.c: 48: _delay((unsigned long)((4)*(48000000/4000.0)));
  2126  0079A6  0E3F               	movlw	63
  2127  0079A8  6E47               	movwf	??_lcd_write_data& (0+255),c
  2128  0079AA  0E55               	movlw	85
  2129  0079AC                     u897:
  2130  0079AC  2EE8               	decfsz	wreg,f,c
  2131  0079AE  D7FE               	goto	u897
  2132  0079B0  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2133  0079B2  D7FC               	goto	u897
  2134  0079B4  F000               	nop	
  2135                           
  2136                           ;lcd_utilities.c: 50: temp1 = data;
  2137  0079B6  C048  F049         	movff	lcd_write_data@data,lcd_write_data@temp1
  2138                           
  2139                           ;lcd_utilities.c: 51: temp1 = temp1 >> 4;
  2140  0079BA  3849               	swapf	lcd_write_data@temp1,w,c
  2141  0079BC  0B0F               	andlw	15
  2142  0079BE  6E49               	movwf	lcd_write_data@temp1,c
  2143                           
  2144                           ;lcd_utilities.c: 52: PORTD = temp1 & 0x0F;
  2145  0079C0  5049               	movf	lcd_write_data@temp1,w,c
  2146  0079C2  0B0F               	andlw	15
  2147  0079C4  6E83               	movwf	3971,c	;volatile
  2148                           
  2149                           ;lcd_utilities.c: 53: _delay((unsigned long)((8)*(48000000/4000.0)));
  2150  0079C6  0E7D               	movlw	125
  2151  0079C8  6E47               	movwf	??_lcd_write_data& (0+255),c
  2152  0079CA  0EAC               	movlw	172
  2153  0079CC                     u907:
  2154  0079CC  2EE8               	decfsz	wreg,f,c
  2155  0079CE  D7FE               	goto	u907
  2156  0079D0  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2157  0079D2  D7FC               	goto	u907
  2158                           
  2159                           ;lcd_utilities.c: 54: PORTDbits.RD6 = 1;
  2160  0079D4  8C83               	bsf	3971,6,c	;volatile
  2161                           
  2162                           ;lcd_utilities.c: 55: _delay((unsigned long)((8)*(48000000/4000.0)));
  2163  0079D6  0E7D               	movlw	125
  2164  0079D8  6E47               	movwf	??_lcd_write_data& (0+255),c
  2165  0079DA  0EAC               	movlw	172
  2166  0079DC                     u917:
  2167  0079DC  2EE8               	decfsz	wreg,f,c
  2168  0079DE  D7FE               	goto	u917
  2169  0079E0  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2170  0079E2  D7FC               	goto	u917
  2171                           
  2172                           ;lcd_utilities.c: 57: lcd_strobe();
  2173  0079E4  EC3B  F03B         	call	_lcd_strobe	;wreg free
  2174                           
  2175                           ;lcd_utilities.c: 58: _delay((unsigned long)((8)*(48000000/4000.0)));
  2176  0079E8  0E7D               	movlw	125
  2177  0079EA  6E47               	movwf	??_lcd_write_data& (0+255),c
  2178  0079EC  0EAC               	movlw	172
  2179  0079EE                     u927:
  2180  0079EE  2EE8               	decfsz	wreg,f,c
  2181  0079F0  D7FE               	goto	u927
  2182  0079F2  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2183  0079F4  D7FC               	goto	u927
  2184                           
  2185                           ;lcd_utilities.c: 60: temp1 = data;
  2186  0079F6  C048  F049         	movff	lcd_write_data@data,lcd_write_data@temp1
  2187                           
  2188                           ;lcd_utilities.c: 61: PORTD = temp1 & 0x0F;
  2189  0079FA  5049               	movf	lcd_write_data@temp1,w,c
  2190  0079FC  0B0F               	andlw	15
  2191  0079FE  6E83               	movwf	3971,c	;volatile
  2192                           
  2193                           ;lcd_utilities.c: 62: _delay((unsigned long)((8)*(48000000/4000.0)));
  2194  007A00  0E7D               	movlw	125
  2195  007A02  6E47               	movwf	??_lcd_write_data& (0+255),c
  2196  007A04  0EAC               	movlw	172
  2197  007A06                     u937:
  2198  007A06  2EE8               	decfsz	wreg,f,c
  2199  007A08  D7FE               	goto	u937
  2200  007A0A  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2201  007A0C  D7FC               	goto	u937
  2202                           
  2203                           ;lcd_utilities.c: 63: PORTDbits.RD6 = 1;
  2204  007A0E  8C83               	bsf	3971,6,c	;volatile
  2205                           
  2206                           ;lcd_utilities.c: 64: _delay((unsigned long)((10)*(48000000/4000.0)));
  2207  007A10  0E9C               	movlw	156
  2208  007A12  6E47               	movwf	??_lcd_write_data& (0+255),c
  2209  007A14  0ED7               	movlw	215
  2210  007A16                     u947:
  2211  007A16  2EE8               	decfsz	wreg,f,c
  2212  007A18  D7FE               	goto	u947
  2213  007A1A  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2214  007A1C  D7FC               	goto	u947
  2215  007A1E  F000               	nop	
  2216                           
  2217                           ;lcd_utilities.c: 66: lcd_strobe();
  2218  007A20  EC3B  F03B         	call	_lcd_strobe	;wreg free
  2219                           
  2220                           ;lcd_utilities.c: 67: _delay((unsigned long)((10)*(48000000/4000.0)));
  2221  007A24  0E9C               	movlw	156
  2222  007A26  6E47               	movwf	??_lcd_write_data& (0+255),c
  2223  007A28  0ED7               	movlw	215
  2224  007A2A                     u957:
  2225  007A2A  2EE8               	decfsz	wreg,f,c
  2226  007A2C  D7FE               	goto	u957
  2227  007A2E  2E47               	decfsz	??_lcd_write_data& (0+255),f,c
  2228  007A30  D7FC               	goto	u957
  2229  007A32  F000               	nop	
  2230  007A34  0012               	return		;funcret
  2231  007A36                     __end_of_lcd_write_data:
  2232                           	opt stack 0
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           prodh	equ	0xFF4
  2238                           prodl	equ	0xFF3
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           postdec1	equ	0xFE5
  2242                           fsr1l	equ	0xFE1
  2243                           indf2	equ	0xFDF
  2244                           postinc2	equ	0xFDE
  2245                           postdec2	equ	0xFDD
  2246                           fsr2h	equ	0xFDA
  2247                           fsr2l	equ	0xFD9
  2248                           status	equ	0xFD8
  2249                           
  2250 ;; *************** function _lcd_init *****************
  2251 ;; Defined at:
  2252 ;;		line 83 in file "lcd_utilities.c"
  2253 ;; Parameters:    Size  Location     Type
  2254 ;;		None
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  i               2    5[COMRAM] int 
  2257 ;; Return value:  Size  Location     Type
  2258 ;;		None               void
  2259 ;; Registers used:
  2260 ;;		wreg, status,2, status,0, cstack
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2266 ;;      Params:         0       0       0       0       0       0       0       0       0
  2267 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2268 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2269 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2270 ;;Total ram usage:        3 bytes
  2271 ;; Hardware stack levels used:    1
  2272 ;; Hardware stack levels required when called:    2
  2273 ;; This function calls:
  2274 ;;		_lcd_write_cmd
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text7
  2281  0078B6                     __ptext7:
  2282                           	opt stack 0
  2283  0078B6                     _lcd_init:
  2284                           	opt stack 28
  2285                           
  2286                           ;lcd_utilities.c: 85: int i;
  2287                           ;lcd_utilities.c: 86: TRISD = 0x00;
  2288                           
  2289                           ;incstack = 0
  2290  0078B6  0E00               	movlw	0
  2291  0078B8  6E95               	movwf	3989,c	;volatile
  2292                           
  2293                           ;lcd_utilities.c: 87: PORTD = 0x00;
  2294  0078BA  0E00               	movlw	0
  2295  0078BC  6E83               	movwf	3971,c	;volatile
  2296                           
  2297                           ;lcd_utilities.c: 88: PORTDbits.RD4 = 0;
  2298  0078BE  9883               	bcf	3971,4,c	;volatile
  2299                           
  2300                           ;lcd_utilities.c: 89: PORTDbits.RD6 = 0;
  2301  0078C0  9C83               	bcf	3971,6,c	;volatile
  2302                           
  2303                           ;lcd_utilities.c: 90: PORTDbits.RD5 = 0;
  2304  0078C2  9A83               	bcf	3971,5,c	;volatile
  2305                           
  2306                           ;lcd_utilities.c: 92: for(i=0;i<100;i++)
  2307  0078C4  0E00               	movlw	0
  2308  0078C6  6E4C               	movwf	lcd_init@i+1,c
  2309  0078C8  0E00               	movlw	0
  2310  0078CA  6E4B               	movwf	lcd_init@i,c
  2311  0078CC                     l1365:
  2312  0078CC  BE4C               	btfsc	lcd_init@i+1,7,c
  2313  0078CE  D006               	goto	l1369
  2314  0078D0  504C               	movf	lcd_init@i+1,w,c
  2315  0078D2  E10F               	bnz	l1373
  2316  0078D4  0E64               	movlw	100
  2317  0078D6  5C4B               	subwf	lcd_init@i,w,c
  2318  0078D8  B0D8               	btfsc	status,0,c
  2319  0078DA  D00B               	goto	l1373
  2320  0078DC                     l1369:
  2321                           
  2322                           ;lcd_utilities.c: 93: _delay((unsigned long)((10)*(48000000/4000.0)));
  2323  0078DC  0E9C               	movlw	156
  2324  0078DE  6E4A               	movwf	??_lcd_init& (0+255),c
  2325  0078E0  0ED7               	movlw	215
  2326  0078E2                     u967:
  2327  0078E2  2EE8               	decfsz	wreg,f,c
  2328  0078E4  D7FE               	goto	u967
  2329  0078E6  2E4A               	decfsz	??_lcd_init& (0+255),f,c
  2330  0078E8  D7FC               	goto	u967
  2331  0078EA  F000               	nop	
  2332  0078EC  4A4B               	infsnz	lcd_init@i,f,c
  2333  0078EE  2A4C               	incf	lcd_init@i+1,f,c
  2334  0078F0  D7ED               	goto	l1365
  2335  0078F2                     l1373:
  2336                           
  2337                           ;lcd_utilities.c: 106: lcd_write_cmd(0x33);
  2338  0078F2  0E33               	movlw	51
  2339  0078F4  EC23  F03C         	call	_lcd_write_cmd
  2340                           
  2341                           ;lcd_utilities.c: 107: lcd_write_cmd(0x32);
  2342  0078F8  0E32               	movlw	50
  2343  0078FA  EC23  F03C         	call	_lcd_write_cmd
  2344                           
  2345                           ;lcd_utilities.c: 109: lcd_write_cmd(0x28);
  2346  0078FE  0E28               	movlw	40
  2347  007900  EC23  F03C         	call	_lcd_write_cmd
  2348                           
  2349                           ;lcd_utilities.c: 112: lcd_write_cmd(0x0E);
  2350  007904  0E0E               	movlw	14
  2351  007906  EC23  F03C         	call	_lcd_write_cmd
  2352                           
  2353                           ;lcd_utilities.c: 115: lcd_write_cmd(0x06);
  2354  00790A  0E06               	movlw	6
  2355  00790C  EC23  F03C         	call	_lcd_write_cmd
  2356                           
  2357                           ;lcd_utilities.c: 119: lcd_write_cmd(0x01);
  2358  007910  0E01               	movlw	1
  2359  007912  EC23  F03C         	call	_lcd_write_cmd
  2360                           
  2361                           ;lcd_utilities.c: 121: _delay((unsigned long)((10)*(48000000/4000.0)));
  2362  007916  0E9C               	movlw	156
  2363  007918  6E4A               	movwf	??_lcd_init& (0+255),c
  2364  00791A  0ED7               	movlw	215
  2365  00791C                     u977:
  2366  00791C  2EE8               	decfsz	wreg,f,c
  2367  00791E  D7FE               	goto	u977
  2368  007920  2E4A               	decfsz	??_lcd_init& (0+255),f,c
  2369  007922  D7FC               	goto	u977
  2370  007924  F000               	nop	
  2371  007926  0012               	return		;funcret
  2372  007928                     __end_of_lcd_init:
  2373                           	opt stack 0
  2374                           tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           postinc0	equ	0xFEE
  2381                           wreg	equ	0xFE8
  2382                           postdec1	equ	0xFE5
  2383                           fsr1l	equ	0xFE1
  2384                           indf2	equ	0xFDF
  2385                           postinc2	equ	0xFDE
  2386                           postdec2	equ	0xFDD
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _lcd_write_cmd *****************
  2392 ;; Defined at:
  2393 ;;		line 18 in file "lcd_utilities.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  cmd             1    wreg     unsigned char 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  cmd             1    2[COMRAM] unsigned char 
  2398 ;;  temp2           1    3[COMRAM] unsigned char 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;		None               void
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2408 ;;      Params:         0       0       0       0       0       0       0       0       0
  2409 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2410 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2411 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2412 ;;Total ram usage:        3 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    1
  2415 ;; This function calls:
  2416 ;;		_lcd_strobe
  2417 ;; This function is called by:
  2418 ;;		_lcd_init
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text8
  2424  007846                     __ptext8:
  2425                           	opt stack 0
  2426  007846                     _lcd_write_cmd:
  2427                           	opt stack 29
  2428                           
  2429                           ;incstack = 0
  2430                           ;lcd_write_cmd@cmd stored from wreg
  2431  007846  6E48               	movwf	lcd_write_cmd@cmd,c
  2432                           
  2433                           ;lcd_utilities.c: 20: unsigned char temp2;
  2434                           ;lcd_utilities.c: 21: PORTDbits.RD6 = 0;
  2435  007848  9C83               	bcf	3971,6,c	;volatile
  2436                           
  2437                           ;lcd_utilities.c: 22: _delay((unsigned long)((4)*(48000000/4000.0)));
  2438  00784A  0E3F               	movlw	63
  2439  00784C  6E47               	movwf	??_lcd_write_cmd& (0+255),c
  2440  00784E  0E55               	movlw	85
  2441  007850                     u987:
  2442  007850  2EE8               	decfsz	wreg,f,c
  2443  007852  D7FE               	goto	u987
  2444  007854  2E47               	decfsz	??_lcd_write_cmd& (0+255),f,c
  2445  007856  D7FC               	goto	u987
  2446  007858  F000               	nop	
  2447                           
  2448                           ;lcd_utilities.c: 23: temp2 = cmd;
  2449  00785A  C048  F049         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  2450                           
  2451                           ;lcd_utilities.c: 24: temp2 = temp2 >> 4;
  2452  00785E  3849               	swapf	lcd_write_cmd@temp2,w,c
  2453  007860  0B0F               	andlw	15
  2454  007862  6E49               	movwf	lcd_write_cmd@temp2,c
  2455                           
  2456                           ;lcd_utilities.c: 25: PORTD = temp2 & 0x0F;
  2457  007864  5049               	movf	lcd_write_cmd@temp2,w,c
  2458  007866  0B0F               	andlw	15
  2459  007868  6E83               	movwf	3971,c	;volatile
  2460                           
  2461                           ;lcd_utilities.c: 27: _delay((unsigned long)((8)*(48000000/4000.0)));
  2462  00786A  0E7D               	movlw	125
  2463  00786C  6E47               	movwf	??_lcd_write_cmd& (0+255),c
  2464  00786E  0EAC               	movlw	172
  2465  007870                     u997:
  2466  007870  2EE8               	decfsz	wreg,f,c
  2467  007872  D7FE               	goto	u997
  2468  007874  2E47               	decfsz	??_lcd_write_cmd& (0+255),f,c
  2469  007876  D7FC               	goto	u997
  2470                           
  2471                           ;lcd_utilities.c: 28: lcd_strobe();
  2472  007878  EC3B  F03B         	call	_lcd_strobe	;wreg free
  2473                           
  2474                           ;lcd_utilities.c: 30: _delay((unsigned long)((8)*(48000000/4000.0)));
  2475  00787C  0E7D               	movlw	125
  2476  00787E  6E47               	movwf	??_lcd_write_cmd& (0+255),c
  2477  007880  0EAC               	movlw	172
  2478  007882                     u1007:
  2479  007882  2EE8               	decfsz	wreg,f,c
  2480  007884  D7FE               	goto	u1007
  2481  007886  2E47               	decfsz	??_lcd_write_cmd& (0+255),f,c
  2482  007888  D7FC               	goto	u1007
  2483                           
  2484                           ;lcd_utilities.c: 32: temp2 = cmd;
  2485  00788A  C048  F049         	movff	lcd_write_cmd@cmd,lcd_write_cmd@temp2
  2486                           
  2487                           ;lcd_utilities.c: 33: PORTD = temp2 & 0x0F;
  2488  00788E  5049               	movf	lcd_write_cmd@temp2,w,c
  2489  007890  0B0F               	andlw	15
  2490  007892  6E83               	movwf	3971,c	;volatile
  2491                           
  2492                           ;lcd_utilities.c: 35: _delay((unsigned long)((8)*(48000000/4000.0)));
  2493  007894  0E7D               	movlw	125
  2494  007896  6E47               	movwf	??_lcd_write_cmd& (0+255),c
  2495  007898  0EAC               	movlw	172
  2496  00789A                     u1017:
  2497  00789A  2EE8               	decfsz	wreg,f,c
  2498  00789C  D7FE               	goto	u1017
  2499  00789E  2E47               	decfsz	??_lcd_write_cmd& (0+255),f,c
  2500  0078A0  D7FC               	goto	u1017
  2501                           
  2502                           ;lcd_utilities.c: 36: lcd_strobe();
  2503  0078A2  EC3B  F03B         	call	_lcd_strobe	;wreg free
  2504                           
  2505                           ;lcd_utilities.c: 37: _delay((unsigned long)((8)*(48000000/4000.0)));
  2506  0078A6  0E7D               	movlw	125
  2507  0078A8  6E47               	movwf	??_lcd_write_cmd& (0+255),c
  2508  0078AA  0EAC               	movlw	172
  2509  0078AC                     u1027:
  2510  0078AC  2EE8               	decfsz	wreg,f,c
  2511  0078AE  D7FE               	goto	u1027
  2512  0078B0  2E47               	decfsz	??_lcd_write_cmd& (0+255),f,c
  2513  0078B2  D7FC               	goto	u1027
  2514  0078B4  0012               	return		;funcret
  2515  0078B6                     __end_of_lcd_write_cmd:
  2516                           	opt stack 0
  2517                           tblptru	equ	0xFF8
  2518                           tblptrh	equ	0xFF7
  2519                           tblptrl	equ	0xFF6
  2520                           tablat	equ	0xFF5
  2521                           prodh	equ	0xFF4
  2522                           prodl	equ	0xFF3
  2523                           postinc0	equ	0xFEE
  2524                           wreg	equ	0xFE8
  2525                           postdec1	equ	0xFE5
  2526                           fsr1l	equ	0xFE1
  2527                           indf2	equ	0xFDF
  2528                           postinc2	equ	0xFDE
  2529                           postdec2	equ	0xFDD
  2530                           fsr2h	equ	0xFDA
  2531                           fsr2l	equ	0xFD9
  2532                           status	equ	0xFD8
  2533                           
  2534 ;; *************** function _lcd_strobe *****************
  2535 ;; Defined at:
  2536 ;;		line 73 in file "lcd_utilities.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;		None
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;		None               void
  2543 ;; Registers used:
  2544 ;;		wreg
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2550 ;;      Params:         0       0       0       0       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2552 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2553 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2554 ;;Total ram usage:        1 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_lcd_write_cmd
  2560 ;;		_lcd_write_data
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text9
  2565  007676                     __ptext9:
  2566                           	opt stack 0
  2567  007676                     _lcd_strobe:
  2568                           	opt stack 29
  2569                           
  2570                           ;lcd_utilities.c: 75: PORTDbits.RD4 = 1;
  2571                           
  2572                           ;incstack = 0
  2573  007676  8883               	bsf	3971,4,c	;volatile
  2574                           
  2575                           ;lcd_utilities.c: 76: _delay((unsigned long)((8)*(48000000/4000.0)));
  2576  007678  0E7D               	movlw	125
  2577  00767A  6E46               	movwf	??_lcd_strobe& (0+255),c
  2578  00767C  0EAC               	movlw	172
  2579  00767E                     u1037:
  2580  00767E  2EE8               	decfsz	wreg,f,c
  2581  007680  D7FE               	goto	u1037
  2582  007682  2E46               	decfsz	??_lcd_strobe& (0+255),f,c
  2583  007684  D7FC               	goto	u1037
  2584                           
  2585                           ;lcd_utilities.c: 77: PORTDbits.RD4 = 0;
  2586  007686  9883               	bcf	3971,4,c	;volatile
  2587                           
  2588                           ;lcd_utilities.c: 78: _delay((unsigned long)((8)*(48000000/4000.0)));
  2589  007688  0E7D               	movlw	125
  2590  00768A  6E46               	movwf	??_lcd_strobe& (0+255),c
  2591  00768C  0EAC               	movlw	172
  2592  00768E                     u1047:
  2593  00768E  2EE8               	decfsz	wreg,f,c
  2594  007690  D7FE               	goto	u1047
  2595  007692  2E46               	decfsz	??_lcd_strobe& (0+255),f,c
  2596  007694  D7FC               	goto	u1047
  2597  007696  0012               	return		;funcret
  2598  007698                     __end_of_lcd_strobe:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1l	equ	0xFE1
  2610                           indf2	equ	0xFDF
  2611                           postinc2	equ	0xFDE
  2612                           postdec2	equ	0xFDD
  2613                           fsr2h	equ	0xFDA
  2614                           fsr2l	equ	0xFD9
  2615                           status	equ	0xFD8
  2616                           
  2617 ;; *************** function _delay_ms *****************
  2618 ;; Defined at:
  2619 ;;		line 10 in file "delays_utilities.c"
  2620 ;; Parameters:    Size  Location     Type
  2621 ;;  i               2    0[COMRAM] unsigned int 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  j               2    3[COMRAM] unsigned int 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;		None               void
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, status,0
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2633 ;;      Params:         2       0       0       0       0       0       0       0       0
  2634 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2635 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2636 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2637 ;;Total ram usage:        5 bytes
  2638 ;; Hardware stack levels used:    1
  2639 ;; This function calls:
  2640 ;;		Nothing
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text10
  2647  0076EA                     __ptext10:
  2648                           	opt stack 0
  2649  0076EA                     _delay_ms:
  2650                           	opt stack 30
  2651                           
  2652                           ;delays_utilities.c: 12: if(i!=0)
  2653                           
  2654                           ;incstack = 0
  2655  0076EA  5046               	movf	delay_ms@i,w,c
  2656  0076EC  1047               	iorwf	delay_ms@i+1,w,c
  2657  0076EE  B4D8               	btfsc	status,2,c
  2658  0076F0  0012               	return	
  2659                           
  2660                           ;delays_utilities.c: 13: for(j=0;j<i;j++)_delay((unsigned long)((1)*(48000000/4000.0)));
  2661  0076F2  0E00               	movlw	0
  2662  0076F4  6E4A               	movwf	delay_ms@j+1,c
  2663  0076F6  0E00               	movlw	0
  2664  0076F8  6E49               	movwf	delay_ms@j,c
  2665  0076FA  D00A               	goto	l45
  2666  0076FC                     l1381:
  2667  0076FC  0E10               	movlw	16
  2668  0076FE  6E48               	movwf	??_delay_ms& (0+255),c
  2669  007700  0E94               	movlw	148
  2670  007702                     u1057:
  2671  007702  2EE8               	decfsz	wreg,f,c
  2672  007704  D7FE               	goto	u1057
  2673  007706  2E48               	decfsz	??_delay_ms& (0+255),f,c
  2674  007708  D7FC               	goto	u1057
  2675  00770A  D000               	nop2	
  2676  00770C  4A49               	infsnz	delay_ms@j,f,c
  2677  00770E  2A4A               	incf	delay_ms@j+1,f,c
  2678  007710                     l45:
  2679  007710  5046               	movf	delay_ms@i,w,c
  2680  007712  5C49               	subwf	delay_ms@j,w,c
  2681  007714  5047               	movf	delay_ms@i+1,w,c
  2682  007716  584A               	subwfb	delay_ms@j+1,w,c
  2683  007718  B0D8               	btfsc	status,0,c
  2684  00771A  0012               	return	
  2685  00771C  D7EF               	goto	l1381
  2686  00771E                     __end_of_delay_ms:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           postinc0	equ	0xFEE
  2695                           wreg	equ	0xFE8
  2696                           postdec1	equ	0xFE5
  2697                           fsr1l	equ	0xFE1
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           fsr2h	equ	0xFDA
  2718                           fsr2l	equ	0xFD9
  2719                           status	equ	0xFD8
  2720                           
  2721                           	psect	rparam
  2722  0000                     tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           prodh	equ	0xFF4
  2727                           prodl	equ	0xFF3
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           postdec1	equ	0xFE5
  2731                           fsr1l	equ	0xFE1
  2732                           indf2	equ	0xFDF
  2733                           postinc2	equ	0xFDE
  2734                           postdec2	equ	0xFDD
  2735                           fsr2h	equ	0xFDA
  2736                           fsr2l	equ	0xFD9
  2737                           status	equ	0xFD8


Data Sizes:
    Strings     19
    Constant    28
    Data        81
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     26      95
    BANK0           160      0      38
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_4(CODE[19]), STR_3(CODE[19]), STR_2(CODE[19]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> buffer(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _onetone->_delay_us
    _delay_us->___lwdiv
    _lcd_write_data->_lcd_strobe
    _lcd_init->_lcd_write_cmd
    _lcd_write_cmd->_lcd_strobe

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4369
                           _delay_ms
                           _lcd_init
                      _lcd_write_cmd
                     _lcd_write_data
                            _onetone
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    17      6    1694
                                             12 COMRAM    14     8      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _onetone                                              3     3      0     686
                                             13 COMRAM     3     3      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             6     4      2     640
                                              7 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write_data                                       3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             3     3      0     159
                                              4 COMRAM     3     3      0
                      _lcd_write_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_write_cmd                                        3     3      0     113
                                              1 COMRAM     3     3      0
                         _lcd_strobe
 ---------------------------------------------------------------------------------
 (2) _lcd_strobe                                           1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2    1604
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _lcd_init
     _lcd_write_cmd
       _lcd_strobe
   _lcd_write_cmd
     _lcd_strobe
   _lcd_write_data
     _lcd_strobe
   _onetone
     _delay_us
       ___lwdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      26       5       23.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1A      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      85      20        0.0%
DATA                 0      0      85       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Feb 08 22:04:45 2023

                      _i 002C                       l45 7710                       l58 7994  
                    l124 7BDE                      l117 775A                      l600 7794  
                    l590 77E6                      u600 7748                      u618 774A  
                    u907 79CC                      u917 79DC                      u927 79EE  
                    u937 7A06                      u947 7A16                      u867 7966  
                    u957 7A2A                      u877 797A                      u967 78E2  
                    u887 798C                      u977 791C                      u897 79AC  
                    u987 7850                      u997 7870                      _key 002F  
                    wreg 000FE8              getkey@F4444 1005                     l1301 7980  
                   l1303 798A                     l1311 776A                     l1241 77B4  
                   l1313 7772                     l1401 7A40                     l1243 77BC  
                   l1315 7776                     l1253 77DC                     l1245 77C0  
                   l1413 7A84                     l1319 778A                     l1423 7AAC  
                   l1407 7A5A                     l1511 7C68                     l1425 7AB0  
                   l1601 7E94                     l1521 7C98                     l1505 7C4E  
                   l1513 7C7C                     l1451 7B50                     l1443 7AF8  
                   l1611 7EBE                     l1381 76FC                     l1373 78F2  
                   l1365 78CC                     l1293 7958                     l1445 7AFE  
                   l1437 7ADC                     l1453 7B58                     l1605 7EA4  
                   l1541 7D08                     l1455 7B70                     l1535 7CEE  
                   l1527 7CB2                     l1463 7B92                     l1369 78DC  
                   l1297 796C                     l1625 7F14                     l1561 7D80  
                   l1553 7D64                     l1387 7726                     l1619 7EFA  
                   l1491 7BF8                     l1483 7BDC                     l1581 7DF0  
                   l1469 7BAC                     l1575 7DD6                     l1567 7D9A  
                   l1497 7C12                     STR_1 1021                     STR_2 1021  
                   STR_3 1021                     STR_4 1021                     u1007 7882  
                   u1017 789A                     u1027 78AC                     u1037 767E  
                   u1047 768E                     u1057 7702   __end_of_lcd_write_data 7A36  
                   _main 7B7E                     fsr2h 000FDA                     fsr1l 000FE1  
                   indf2 000FDF                     fsr2l 000FD9                     prodh 000FF4  
                   prodl 000FF3           ?_lcd_write_cmd 0046                     start 1000  
           ___param_bank 000010                    ?_main 0046          __end_of___lwdiv 77F0  
        __end_of___lwmod 779E                    _PORTB 000F81                    _PORTD 000F83  
                  _TRISD 000F95         lcd_write_cmd@cmd 0048          __end_of_dpowers 1021  
        __end_of_onetone 775C                    tablat 000FF5          ?_lcd_write_data 0046  
                  status 000FD8          __end_of_sprintf 7B7E          __initialization 77F0  
           __end_of_main 8000                   ??_main 0060            __activetblptr 000002  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
                 _ADRESH 000FC4          ??_lcd_write_cmd 0047         __end_of_delay_ms 771E  
       __end_of_delay_us 79A2         __end_of_lcd_init 7928                ??___lwdiv 004A  
              ??___lwmod 0051                   _buffer 0032                   clear_0 77F6  
           __pdataCOMRAM 0001             __mediumconst 0000                   tblptrh 000FF7  
              ??_onetone 0053                   tblptrl 000FF6                   tblptru 000FF8  
              ??_sprintf 0058               __accesstop 0060  __end_of__initialization 783C  
          ___rparam_used 000001           __pcstackCOMRAM 0046             __pidataBANK0 7699  
              ?_delay_ms 0046                ?_delay_us 004D         ??_lcd_write_data 0047  
             _lcd_strobe 7676                ?_lcd_init 0046       lcd_write_data@data 0048  
     lcd_write_cmd@temp2 0049                  __Hparam 0000                  __Lparam 0000  
              _ADC_value 002E                  ___lwdiv 779E                  ___lwmod 775C  
           __psmallconst 1004                  __pcinit 77F0                  __ramtop 0800  
                __ptext0 7B7E                  __ptext1 7A36                  __ptext2 775C  
                __ptext3 771E                  __ptext4 7928                  __ptext5 779E  
                __ptext6 79A2                  __ptext7 78B6                  __ptext8 7846  
                __ptext9 7676                  _dpowers 1017               ??_delay_ms 0048  
             ??_delay_us 004F                  _onetone 771E                  _outchar 0030  
                _sprintf 7A36               ??_lcd_init 004A     end_of_initialization 783C  
          __Lmediumconst 0000                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _PORTBbits 000F81  
              _PORTCbits 000F82                _PORTDbits 000F83                _TRISCbits 000F94  
            ?_lcd_strobe 0046    __end_of_lcd_write_cmd 78B6            __pidataCOMRAM 76BF  
    start_initialization 77F0            delay_us@lower 0051              __pdataBANK0 0060  
    __size_of_lcd_strobe 0022              __pbssCOMRAM 002C        __size_of_delay_ms 0034  
      __size_of_delay_us 007A        __size_of_lcd_init 0072              sprintf@flag 005B  
            sprintf@prec 005C         ___lwdiv@dividend 0046                 ?___lwdiv 0046  
               ?___lwmod 004D              __smallconst 1004                 ?_onetone 0046  
       ___lwdiv@quotient 004A                 ?_sprintf 0052                delay_ms@i 0046  
              delay_ms@j 0049                delay_us@i 004D                delay_us@j 004F  
             _ADCON0bits 000FC2                lcd_init@i 004B      lcd_write_data@temp1 0049  
           ??_lcd_strobe 0046                copy_data0 7810                copy_data1 7830  
               _Message1 0001                 _Message2 0074                 _Message3 0011  
               _Message4 0020                 _Message5 0060  __size_of_lcd_write_data 0094  
               __Hrparam 0000                 __Lrparam 0000         __size_of___lwdiv 0052  
     __end_of_lcd_strobe 7698         __size_of___lwmod 0042               sprintf@val 005D  
               _delay_ms 76EA                 _delay_us 7928          ___lwdiv@divisor 0048  
        ___lwdiv@counter 004C                 __ptext10 76EA         __size_of_onetone 003E  
               _lcd_init 78B6         __size_of_sprintf 0148            __size_of_main 0482  
               _outchar2 0031   __size_of_lcd_write_cmd 0070                sprintf@ap 0059  
              sprintf@sp 0052         ___lwmod@dividend 004D      __end_ofgetkey@F4444 1017  
               onetone@k 0054                 sprintf@c 005F                 sprintf@f 0054  
        ___lwmod@divisor 004F          ___lwmod@counter 0051           _lcd_write_data 79A2  
          _lcd_write_cmd 7846  
